var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html",[0,0.03,1,2.761]],["body/classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html",[0,0.025,1,4.231,2,1.075,3,0.17,4,0.15,5,0.15,6,4.758,7,2.555,8,1.837,9,2.591,10,0.375,11,0.868,12,1.321,13,1.02,14,3.14,15,1.701,16,2.206,17,2.206,18,0.468,19,0.02,20,0.6,21,1.27,22,1.347,23,0.717,24,2.985,25,2.206,26,3.379,27,2.985,28,1.194,29,1.076,30,1.02,31,1.8,32,2.206,33,2.985,34,0.19,35,0.917,36,0.17,37,1.858,38,3.861,39,3.14,40,6.492,41,5.559,42,2.98,43,2.206,44,5.559,45,3.459,46,2.985,47,1.891,48,2.975,49,2.985,50,2.985,51,4.231,52,3.286,53,4.318,54,3.696,55,3.696,56,2.555,57,2.532,58,5.559,59,3.696,60,4.318,61,2.985,62,3.286,63,3.214,64,2.985,65,2.985,66,0.012,67,0.012]],["title/classes/AddFollowsRelationTable1658668825878.html",[0,0.03,68,2.761]],["body/classes/AddFollowsRelationTable1658668825878.html",[0,0.03,2,1.3,3,0.205,4,0.182,5,0.182,8,2.1,9,2.872,10,0.23,11,0.992,12,1.418,13,1.166,14,3.338,15,1.808,16,2.52,17,2.52,18,0.518,19,0.02,20,0.725,21,1.536,22,1.628,23,0.795,25,2.52,26,3.529,28,1.365,29,1.229,30,1.166,31,1.957,32,2.52,34,0.23,35,1.108,36,0.205,37,1.365,38,2.746,39,2.52,42,3.406,43,2.872,45,2.116,47,2.286,48,2.116,63,2.286,66,0.013,67,0.013,68,4.6,69,5.174,70,3.089,71,3.608,72,3.608,73,3.608,74,3.755,75,1.984,76,2.49,77,2.49,78,2.746,79,3.608]],["title/classes/AddRelationsBetweenArticleAndUser1658591658979.html",[0,0.03,80,2.761]],["body/classes/AddRelationsBetweenArticleAndUser1658591658979.html",[0,0.028,2,1.241,3,0.196,4,0.173,5,0.173,8,2.034,9,2.803,10,0.219,11,0.96,12,1.395,13,1.129,14,3.291,15,1.782,16,2.441,17,2.441,18,0.506,19,0.02,20,0.692,21,1.466,22,1.554,23,0.776,25,2.441,26,3.494,28,1.322,29,1.19,30,1.129,31,1.919,32,2.441,34,0.219,35,1.058,36,0.196,37,1.64,39,3.028,42,2.378,45,2.803,48,2.02,51,4.511,52,3.637,54,2.949,55,2.949,56,2.949,57,2.02,59,2.949,62,3.637,66,0.013,67,0.013,80,4.511,81,5.073,82,2.949,83,3.445,84,3.445,85,3.445,86,3.237,87,5.488,88,4.779,89,4.779,90,2.02]],["title/classes/AddUsernameToUsers1658152414900.html",[0,0.03,91,2.761]],["body/classes/AddUsernameToUsers1658152414900.html",[0,0.03,2,1.325,3,0.209,4,0.185,5,0.185,8,2.127,9,2.901,10,0.234,11,1.005,12,1.427,13,1.181,14,3.357,15,1.818,16,2.554,17,2.554,18,0.524,19,0.02,20,0.739,21,1.565,22,1.66,23,0.803,25,2.554,26,3.543,28,1.383,29,1.245,30,1.181,31,1.973,32,2.554,34,0.234,35,1.13,36,0.209,37,1.383,39,2.554,43,1.879,51,3.805,52,2.799,62,2.799,66,0.014,67,0.014,90,2.157,91,4.637,92,5.216,93,3.148,94,3.678,95,3.678,96,3.678,97,3.805,98,2.256,99,2.539,100,2.539]],["title/controllers/AppController.html",[101,1.544,102,2.504]],["body/controllers/AppController.html",[0,0.039,3,0.268,4,0.237,5,0.237,10,0.3,13,1.388,19,0.02,20,1.181,23,0.666,30,1.113,34,0.374,36,0.268,66,0.016,67,0.016,101,2.5,102,4.055,103,2.005,104,4.033,105,5.737,106,1.697,107,4.712,108,1.303,109,3.754,110,4.033,111,2.763,112,1.697,113,1.697,114,4.712]],["title/modules/AppModule.html",[115,1.544,116,2.504]],["body/modules/AppModule.html",[0,0.026,3,0.182,4,0.161,5,0.161,12,0.717,13,0.757,18,0.295,19,0.021,23,0.453,28,0.886,29,0.798,30,0.757,34,0.443,36,0.182,66,0.012,67,0.012,102,3.641,103,1.933,108,0.886,109,3.692,110,2.742,115,1.933,116,4.883,117,1.636,118,2.32,119,2.742,120,2.742,121,2.742,122,3.988,123,3.988,124,3.988,125,3.988,126,2.663,127,1.878,128,1.878,129,3.203,130,2.877,131,2.877,132,3.203,133,4.541,134,5.741,135,3.203,136,3.203,137,3.203,138,3.203,139,3.203,140,3.203,141,2.029,142,1.445,143,3.203,144,2.438,145,3.203,146,3.203,147,2.742,148,5.276,149,2.211,150,3.203,151,3.203,152,3.203,153,3.203,154,3.203,155,3.203,156,3.203]],["title/injectables/AppService.html",[109,2.128,157,1.175]],["body/injectables/AppService.html",[0,0.041,3,0.281,4,0.248,5,0.248,10,0.314,13,1.428,19,0.02,20,1.215,23,0.698,30,1.166,34,0.314,36,0.281,66,0.016,67,0.016,105,5.831,108,1.365,109,3.546,113,1.778,157,1.957,158,2.521,159,4.225,160,4.936,161,4.936,162,4.936]],["title/controllers/ArticleController.html",[101,1.544,163,2.504]],["body/controllers/ArticleController.html",[0,0.014,3,0.098,4,0.087,5,0.087,10,0.109,12,1.212,13,0.666,15,1.881,18,0.499,19,0.02,20,1.269,23,0.765,28,1.497,29,1.348,30,1.278,31,2.016,34,0.367,36,0.098,37,1.497,57,1.009,66,0.008,67,0.008,86,0.939,101,0.732,103,0.732,106,1.949,108,0.476,111,1.009,112,0.62,113,1.949,163,1.945,164,1.472,165,1.309,166,3.065,167,2.471,168,3.065,169,3.065,170,2.471,171,3.065,172,3.581,173,3.065,174,1.72,175,2.48,176,4.091,177,1.72,178,1.72,179,4.048,180,1.72,181,1.491,182,3.74,183,1.72,184,2.895,185,1.72,186,2.725,187,1.72,188,1.72,189,1.72,190,1.472,191,1.72,192,1.72,193,1.72,194,1.472,195,5.053,196,3.284,197,1.72,198,4.57,199,1.72,200,1.472,201,1.72,202,1.72,203,1.72,204,2.819,205,1.72,206,1.72,207,3.544,208,1.72,209,1.72,210,2.1,211,1.472,212,1.472,213,1.472,214,1.09,215,1.472,216,1.09,217,1.472,218,1.472,219,1.072,220,1.309,221,0.939,222,1.187,223,0.732,224,1.009,225,1.472,226,2.145,227,1.472,228,1.309,229,1.472,230,1.72,231,3.544,232,2.145,233,1.786,234,3.736,235,1.72,236,1.72,237,3.736,238,1.72,239,2.819,240,1.837,241,2.895,242,1.72,243,4.57,244,4.57,245,1.72,246,1.72,247,1.72,248,1.72,249,1.72,250,1.72,251,1.72,252,1.72,253,1.72]],["title/entities/ArticleEntity.html",[254,1.739,255,1.853]],["body/entities/ArticleEntity.html",[0,0.023,3,0.155,4,0.137,5,0.137,10,0.174,11,0.812,12,0.611,18,0.623,19,0.021,20,1.322,21,2.623,23,0.93,34,0.257,35,0.838,36,0.155,66,0.011,67,0.011,75,1.936,86,1.49,90,3.858,106,2.369,175,2.025,176,3.051,181,1.918,219,1.537,223,1.161,224,2.824,233,2.561,254,1.938,255,2.065,256,1.6,257,2.335,258,2.824,259,4.122,260,2.824,261,4.122,262,3.324,263,3.051,264,4.122,265,2.728,266,4.042,267,4.042,268,2.728,269,4.122,270,2.728,271,5.686,272,4.042,273,4.558,274,5.325,275,2.728,276,2.728,277,2.371,278,2.728,279,3.324,280,2.728,281,2.728,282,4.042,283,4.042,284,2.728,285,2.728,286,2.728,287,4.042,288,4.042,289,2.728,290,2.728,291,1.49]],["title/modules/ArticleModule.html",[115,1.544,122,2.299]],["body/modules/ArticleModule.html",[0,0.034,3,0.238,4,0.21,5,0.21,19,0.02,34,0.441,36,0.238,66,0.015,67,0.015,103,2.315,108,1.155,115,2.315,117,2.133,118,2.779,122,4.318,126,3.191,127,2.449,128,2.449,130,3.447,131,2.646,141,2.646,142,1.885,163,4.176,181,1.959,210,3.997,211,3.575,223,1.777,255,2.133,292,3.575,293,3.575,294,4.177,295,4.177,296,2.646,297,2.971,298,2.883,299,4.177]],["title/interfaces/ArticleResponseInterface.html",[214,2.299,300,1.239]],["body/interfaces/ArticleResponseInterface.html",[3,0.29,4,0.256,5,0.256,10,0.324,11,1.238,18,0.469,19,0.02,34,0.324,36,0.29,66,0.017,67,0.017,214,3.903,241,4.362,255,3.516,296,3.225,300,1.738,301,2.6,302,4.357]],["title/injectables/ArticleService.html",[157,1.175,210,2.128]],["body/injectables/ArticleService.html",[0,0.009,3,0.064,4,0.056,5,0.056,10,0.071,12,1.132,13,0.462,15,1.728,18,0.466,19,0.021,20,1.207,23,0.715,28,1.398,29,1.259,30,1.154,31,1.839,34,0.322,35,0.343,36,0.064,37,1.713,66,0.005,67,0.005,74,0.851,75,1.571,77,0.772,86,1.94,98,0.882,108,0.309,112,0.939,113,1.925,142,0.504,157,0.633,158,0.571,166,2.231,168,2.231,169,2.231,170,1.799,171,2.231,173,2.231,175,2.257,176,3.202,179,3.598,181,1.126,182,3.202,186,2.704,194,0.957,195,3.345,196,2.666,200,0.957,207,2.677,210,1.147,212,0.957,213,0.957,214,1.652,215,0.957,216,0.708,217,0.957,219,0.991,223,0.476,233,0.708,240,2.568,241,3.386,255,1.815,258,2.084,263,0.708,277,2.084,291,1.94,296,0.708,297,0.611,298,0.772,303,0.957,304,1.956,305,2.607,306,1.956,307,2.697,308,1.956,309,1.239,310,1.118,311,3.093,312,1.984,313,2.231,314,1.118,315,1.956,316,1.118,317,3.822,318,1.118,319,1.956,320,1.118,321,1.118,322,1.118,323,1.118,324,1.118,325,1.118,326,1.118,327,1.118,328,1.956,329,1.118,330,1.118,331,1.956,332,1.118,333,1.118,334,1.118,335,0.708,336,0.708,337,0.772,338,1.118,339,1.674,340,1.118,341,0.851,342,0.957,343,1.956,344,1.956,345,1.956,346,1.956,347,1.956,348,1.674,349,1.956,350,1.956,351,1.956,352,1.118,353,1.674,354,1.956,355,2.974,356,1.118,357,1.118,358,1.956,359,3.553,360,3.041,361,3.553,362,1.118,363,1.118,364,1.118,365,1.118,366,1.118,367,2.607,368,1.956,369,1.956,370,3.041,371,1.956,372,1.956,373,3.128,374,1.956,375,2.677,376,1.956,377,1.118,378,1.118,379,1.956,380,1.118,381,1.118,382,1.118,383,1.956,384,1.956,385,1.118,386,1.118,387,0.957,388,3.128,389,1.118,390,3.128,391,1.956,392,1.956,393,1.956,394,1.956,395,1.956,396,1.488,397,1.118,398,1.956,399,1.674,400,1.956,401,1.118,402,1.982,403,1.956,404,1.674,405,1.674,406,1.956,407,1.956,408,1.956,409,1.118,410,1.118,411,1.118,412,1.118,413,1.118,414,1.118,415,1.118]],["title/interfaces/ArticlesResponseInterface.html",[216,2.299,300,1.239]],["body/interfaces/ArticlesResponseInterface.html",[3,0.278,4,0.246,5,0.246,10,0.311,11,1.209,18,0.554,19,0.02,34,0.311,36,0.278,66,0.016,67,0.016,86,3.709,175,2.476,216,3.81,300,1.67,301,2.5,370,5.813,416,4.189,417,5.813,418,4.893]],["title/guards/AuthGuard.html",[221,1.981,419,2.761]],["body/guards/AuthGuard.html",[0,0.035,3,0.243,4,0.215,5,0.215,8,1.817,10,0.272,12,0.957,13,1.304,18,0.394,19,0.02,23,0.604,28,1.181,29,1.064,30,1.009,34,0.389,36,0.243,66,0.015,67,0.015,108,1.181,113,1.538,157,1.787,221,3.014,233,2.706,240,1.717,291,2.332,335,2.706,336,2.706,402,2.706,420,4.271,421,3.655,422,6.465,423,5.519,424,5.533,425,4.271,426,4.271,427,5.519,428,2.504,429,3.25,430,4.271,431,3.655,432,2.706,433,4.271,434,3.655,435,4.271,436,4.271,437,4.271]],["title/injectables/AuthMiddleware.html",[149,2.504,157,1.175]],["body/injectables/AuthMiddleware.html",[0,0.028,3,0.193,4,0.171,5,0.171,8,1.444,10,0.216,12,1.059,13,1.117,15,1.506,18,0.436,19,0.02,23,0.669,28,1.308,29,1.178,30,0.802,34,0.408,36,0.193,37,0.939,43,2.416,66,0.013,67,0.013,108,0.939,111,1.99,112,1.222,113,1.222,149,3.264,157,1.531,158,1.734,219,1.799,240,2.189,309,2.15,396,2.583,428,3.454,429,2.583,432,2.15,438,2.905,439,4.73,440,3.394,441,3.502,442,3.394,443,4.73,444,5.444,445,5.889,446,6.413,447,5.889,448,3.394,449,2.905,450,3.264,451,3.394,452,2.583,453,4.73,454,2.342,455,3.394,456,2.342,457,3.394,458,5.444,459,2.583,460,3.394,461,3.394,462,3.394,463,3.394,464,2.905,465,3.394,466,3.394,467,3.394]],["title/injectables/BackendValidationPipe.html",[157,1.175,184,2.299]],["body/injectables/BackendValidationPipe.html",[0,0.046,3,0.204,4,0.18,5,0.18,8,1.526,10,0.228,12,1.101,13,1.161,15,1.55,18,0.453,19,0.02,22,2.529,23,0.695,28,1.359,29,1.224,30,1.161,34,0.357,36,0.204,37,0.992,66,0.013,67,0.013,108,0.992,113,2.019,157,1.591,158,1.832,184,3.113,190,3.069,232,3.739,240,1.975,277,2.103,291,1.958,335,3.113,336,2.272,402,2.272,468,3.069,469,4.913,470,4.913,471,6.029,472,3.586,473,4.797,474,4.913,475,4.797,476,6.029,477,3.586,478,4.913,479,3.586,480,2.729,481,3.586,482,2.103,483,3.586,484,3.586,485,3.586,486,3.586,487,3.586,488,3.069,489,3.586,490,3.586,491,3.586,492,3.586,493,3.586]],["title/classes/CreateArticleDto.html",[0,0.03,182,2.299]],["body/classes/CreateArticleDto.html",[0,0.044,2,1.477,3,0.233,4,0.206,5,0.206,10,0.261,11,1.08,18,0.587,19,0.02,20,1.409,23,0.9,29,1.339,34,0.261,36,0.233,66,0.015,67,0.015,106,2.16,112,2.613,182,3.406,224,3.517,260,3.517,262,4.139,263,3.8,482,2.405,494,3.511,495,4.769,496,4.102,497,4.102,498,4.102,499,4.102]],["title/classes/CreateArticles1658590819603.html",[0,0.03,500,2.761]],["body/classes/CreateArticles1658590819603.html",[0,0.027,2,1.18,3,0.186,4,0.165,5,0.165,8,1.964,9,2.729,10,0.208,11,0.927,12,1.369,13,1.09,14,3.239,15,1.754,16,2.357,17,2.357,18,0.493,19,0.02,20,0.658,21,2.699,22,1.478,23,0.755,25,2.357,26,3.455,28,1.277,29,1.149,30,1.09,31,1.877,32,2.357,34,0.208,35,1.006,36,0.186,37,1.277,38,2.494,39,2.357,42,2.261,43,3.455,45,1.922,47,2.076,48,1.922,63,2.076,66,0.013,67,0.013,75,1.855,76,2.261,86,2.52,99,4.002,100,4.002,176,2.076,224,1.922,259,2.805,260,1.922,261,2.805,262,2.261,263,2.076,264,2.805,273,3.95,277,1.922,500,4.413,501,4.964,502,2.805,503,3.277,504,3.277,505,3.277,506,3.277,507,4.615,508,3.277]],["title/classes/CreateTags1658063174837.html",[0,0.03,509,2.761]],["body/classes/CreateTags1658063174837.html",[0,0.03,2,1.3,3,0.205,4,0.182,5,0.182,8,2.1,9,2.872,10,0.23,11,0.992,12,1.464,13,1.166,14,3.338,15,1.808,16,2.52,17,2.52,18,0.518,19,0.02,20,0.725,21,1.536,22,1.628,23,0.795,25,2.52,26,3.529,28,1.365,29,1.229,30,1.166,31,1.957,32,2.52,34,0.23,35,1.108,36,0.205,37,1.365,39,2.52,43,2.52,45,2.116,47,2.286,48,2.116,63,2.286,66,0.013,67,0.013,75,1.984,76,2.49,99,2.49,100,2.49,167,2.49,509,4.6,510,5.174,511,3.089,512,3.608,513,3.608,514,3.608,515,3.089,516,3.406,517,3.608]],["title/classes/CreateUserDto.html",[0,0.03,518,2.299]],["body/classes/CreateUserDto.html",[0,0.046,2,1.544,3,0.244,4,0.216,5,0.216,10,0.273,11,1.112,18,0.565,19,0.02,20,1.379,23,0.866,34,0.273,36,0.244,66,0.015,67,0.015,98,2.764,106,2.207,112,2.575,482,2.514,495,4.737,518,3.505,519,3.669,520,3.129,521,3.346,522,3.669,523,4.287,524,4.287,525,4.287,526,4.211]],["title/classes/CreateUsers1658070509018.html",[0,0.03,527,2.761]],["body/classes/CreateUsers1658070509018.html",[0,0.028,2,1.237,3,0.195,4,0.173,5,0.173,8,2.03,9,2.799,10,0.218,11,0.958,12,1.393,13,1.127,14,3.288,15,1.781,16,2.436,17,2.436,18,0.505,19,0.02,20,0.69,21,2.332,22,1.55,23,0.775,25,2.436,26,3.491,28,1.319,29,1.188,30,1.127,31,1.916,32,2.436,34,0.218,35,1.055,36,0.195,37,1.319,39,2.436,43,3.177,45,2.014,47,2.176,48,2.014,63,2.176,66,0.013,67,0.013,75,1.917,76,2.37,97,3.63,99,4.085,100,4.085,167,2.37,515,2.94,520,1.754,521,1.876,527,4.505,528,5.067,529,2.94,530,3.435,531,3.435,532,3.435,533,2.37,534,2.37,535,3.435]],["title/interfaces/ExpressRequest.html",[300,1.239,428,2.128]],["body/interfaces/ExpressRequest.html",[3,0.276,4,0.244,5,0.244,10,0.309,11,1.202,18,0.447,19,0.02,29,1.49,34,0.381,36,0.276,66,0.016,67,0.016,181,2.439,219,2.575,223,2.065,300,1.656,301,2.478,428,3.509,432,4.11,454,3.349,536,4.153,537,5.121]],["title/classes/FindAllQueryDto.html",[0,0.03,196,2.299]],["body/classes/FindAllQueryDto.html",[0,0.043,2,1.402,3,0.221,4,0.196,5,0.196,10,0.248,11,1.044,18,0.599,19,0.02,20,1.343,21,2.21,22,2.813,23,0.918,34,0.248,36,0.221,66,0.014,67,0.014,106,1.87,175,2.371,196,3.29,232,4.944,258,3.427,277,3.045,353,5.002,375,5.002,480,2.962,538,3.331,539,5.844,540,5.844,541,3.892,542,3.892,543,5.193,544,3.892,545,3.892,546,3.892,547,5.193]],["title/entities/FollowEntity.html",[254,1.739,297,1.981]],["body/entities/FollowEntity.html",[0,0.036,3,0.25,4,0.221,5,0.221,10,0.279,11,1.128,12,0.982,18,0.571,19,0.02,23,0.875,34,0.279,35,1.347,36,0.25,66,0.015,67,0.015,74,3.338,75,2.49,77,4.274,78,4.713,90,3.958,106,2.231,175,2.626,254,2.692,256,2.572,279,4.274,297,3.066,548,3.754,549,4.385,550,4.385,551,4.385]],["title/interfaces/ITagsResponse.html",[300,1.239,552,2.504]],["body/interfaces/ITagsResponse.html",[3,0.296,4,0.262,5,0.262,10,0.331,11,1.255,18,0.48,19,0.019,20,1.344,36,0.296,66,0.017,67,0.017,300,1.777,301,2.659,516,4.787,552,4.31,553,4.456]],["title/classes/InitialSeed1658665867977.html",[0,0.03,554,2.761]],["body/classes/InitialSeed1658665867977.html",[0,0.024,2,1.032,3,0.163,4,0.144,5,0.144,8,1.783,9,2.531,10,0.182,12,1.3,13,0.99,14,3.096,15,1.676,16,2.141,17,2.141,18,0.386,19,0.02,23,0.592,25,2.141,26,3.344,28,1.159,29,1.044,30,0.99,31,1.765,32,2.141,34,0.386,35,0.88,36,0.163,37,1.508,66,0.011,67,0.011,75,1.685,98,1.293,176,2.655,181,1.032,219,1.09,223,1.219,224,3.198,240,1.152,241,4.067,255,1.464,258,2.458,260,2.458,262,2.892,263,2.655,296,1.815,348,3.587,520,1.464,521,1.565,554,3.19,555,4.241,556,2.452,557,2.865,558,2.865,559,1.68,560,2.18,561,5.453,562,2.865,563,2.452,564,1.977,565,2.865,566,4.955,567,4.955,568,2.865,569,4.955,570,4.955,571,4.955,572,2.865,573,4.955,574,2.865,575,2.865,576,2.865,577,2.865,578,2.865,579,2.452,580,2.865,581,2.865,582,2.865,583,5.453,584,4.191,585,5.453]],["title/classes/LoginUserDto.html",[0,0.03,586,2.299]],["body/classes/LoginUserDto.html",[0,0.048,2,1.643,3,0.259,4,0.23,5,0.23,10,0.29,11,1.157,18,0.531,19,0.02,20,1.331,23,0.814,34,0.29,36,0.259,66,0.016,67,0.016,106,2.073,112,2.512,482,2.675,495,4.572,520,3.222,521,3.444,522,3.904,526,4.381,586,3.647,587,3.904,588,4.561,589,4.561]],["title/controllers/ProfileController.html",[101,1.544,590,2.504]],["body/controllers/ProfileController.html",[0,0.024,3,0.165,4,0.146,5,0.146,10,0.185,12,1.118,13,0.999,15,1.817,18,0.46,19,0.02,20,1.32,23,0.706,28,1.381,29,1.243,30,1.179,31,1.971,34,0.371,36,0.165,37,1.381,57,1.702,66,0.012,67,0.012,101,1.235,103,1.235,106,1.798,108,0.803,111,1.702,112,1.045,113,1.798,165,2.208,175,2.498,179,4.162,219,1.104,220,2.208,221,1.585,222,2.003,225,2.484,226,2.208,228,2.208,234,3.799,237,3.219,240,2.007,590,2.919,591,2.484,592,2.902,593,4.272,594,4.272,595,4.272,596,2.484,597,5.853,598,2.902,599,2.902,600,2.484,601,4.23,602,2.902,603,2.484,604,2.902,605,2.902,606,2.927,607,2.484,608,1.838,609,2.484,610,2.902,611,4.991,612,3.799,613,2.902,614,4.991,615,2.902,616,2.902,617,2.902,618,2.902]],["title/modules/ProfileModule.html",[115,1.544,123,2.299]],["body/modules/ProfileModule.html",[0,0.036,3,0.245,4,0.217,5,0.217,19,0.02,34,0.437,36,0.245,66,0.015,67,0.015,103,2.36,108,1.19,115,2.36,117,2.198,118,2.833,123,4.353,126,3.253,127,2.523,128,2.523,130,3.514,131,2.726,141,2.726,142,1.941,181,1.55,223,1.831,297,3.029,298,2.97,590,4.236,606,4.029,607,3.683,619,3.683,620,3.683,621,4.303,622,4.303,623,3.683]],["title/interfaces/ProfileResponseInterface.html",[300,1.239,608,2.299]],["body/interfaces/ProfileResponseInterface.html",[3,0.29,4,0.256,5,0.256,10,0.324,11,1.238,18,0.469,19,0.02,34,0.324,36,0.29,66,0.017,67,0.017,300,1.738,301,2.6,608,3.903,612,5.239,624,4.357,625,5.67,626,3.874,627,4.357]],["title/injectables/ProfileService.html",[157,1.175,606,2.128]],["body/injectables/ProfileService.html",[0,0.017,3,0.119,4,0.105,5,0.105,10,0.133,12,1.129,13,0.777,15,1.654,18,0.464,19,0.021,20,1.202,23,0.712,28,1.394,29,1.255,30,1.093,31,1.733,34,0.357,35,0.64,36,0.119,37,1.551,57,1.223,66,0.009,67,0.009,77,2.813,78,3.102,98,1.839,108,0.577,112,1.185,113,1.667,142,0.941,157,1.065,158,1.065,175,2.274,179,4.023,181,0.751,219,2.274,223,0.887,233,1.321,240,2.153,291,2.924,297,1.797,298,1.439,307,2.271,309,2.085,311,3.551,312,2.504,313,3.489,335,2.582,336,1.321,337,1.439,341,1.587,342,1.784,355,3.102,402,3.192,404,3.489,405,3.489,593,3.489,594,3.489,595,3.489,596,1.784,597,5.435,600,1.784,603,1.784,606,1.93,608,2.582,609,1.784,612,2.504,626,3.522,627,1.784,628,1.784,629,3.29,630,1.784,631,2.085,632,3.29,633,2.085,634,2.085,635,2.085,636,2.085,637,4.076,638,4.076,639,3.29,640,4.583,641,5.038,642,2.085,643,3.29,644,3.29,645,3.29,646,3.29,647,2.085,648,2.085,649,2.085,650,2.085,651,2.085,652,1.587,653,2.085]],["title/controllers/TagController.html",[101,1.544,654,2.504]],["body/controllers/TagController.html",[0,0.036,3,0.248,4,0.219,5,0.219,10,0.277,13,1.32,15,1.707,19,0.02,23,0.615,30,1.028,31,1.809,34,0.393,36,0.248,37,1.204,66,0.015,67,0.015,101,1.852,103,1.852,106,1.567,108,1.204,111,2.552,112,1.567,113,1.567,165,3.312,170,4.494,240,1.75,516,4.259,552,3.004,654,3.856,655,3.725,656,4.352,657,3.619,658,3.725,659,4.352,660,4.352,661,4.352,662,4.352,663,4.352]],["title/entities/TagEntity.html",[254,1.739,559,2.128]],["body/entities/TagEntity.html",[0,0.038,3,0.263,4,0.232,5,0.232,10,0.294,11,1.166,12,1.49,18,0.535,19,0.02,20,1.166,23,0.82,34,0.294,35,1.418,36,0.263,66,0.016,67,0.016,75,2.55,90,3.719,106,2.089,175,2.206,254,2.781,256,2.707,279,4.377,516,3.186,559,3.402,664,3.951,665,4.616,666,4.616]],["title/modules/TagModule.html",[115,1.544,124,2.299]],["body/modules/TagModule.html",[0,0.036,3,0.248,4,0.219,5,0.219,19,0.02,34,0.428,36,0.248,66,0.015,67,0.015,103,2.378,108,1.204,115,2.378,117,2.223,118,2.854,124,4.366,126,3.277,127,2.552,128,2.552,130,3.54,131,2.757,141,2.757,142,1.964,559,2.552,560,3.312,654,4.259,657,4.041,658,3.725,667,3.725,668,3.725,669,4.352,670,4.352,671,4.352,672,4.352,673,4.352]],["title/injectables/TagService.html",[157,1.175,657,2.128]],["body/injectables/TagService.html",[0,0.035,3,0.241,4,0.213,5,0.213,10,0.27,12,0.949,13,1.298,15,1.686,18,0.391,19,0.02,23,0.777,28,1.173,29,1.056,30,1.001,31,1.778,34,0.41,35,1.302,36,0.241,37,1.173,66,0.015,67,0.015,108,1.173,112,1.527,113,1.527,142,1.913,157,1.778,158,2.165,170,4.449,307,2.925,309,3.48,311,4.084,337,2.925,559,2.486,560,3.226,657,3.221,674,3.628,675,4.239,676,4.239,677,5.493,678,4.239,679,4.239,680,4.239]],["title/classes/UpdateUserDto.html",[0,0.03,681,2.299]],["body/classes/UpdateUserDto.html",[0,0.045,2,1.527,3,0.241,4,0.213,5,0.213,10,0.27,11,1.104,18,0.594,19,0.02,20,1.419,23,0.911,34,0.27,36,0.241,66,0.015,67,0.015,98,2.75,106,1.527,112,2.626,482,2.486,495,2.925,520,3.113,526,4.638,533,4.206,534,4.206,681,3.48,682,3.628,683,4.239,684,4.239,685,4.239,686,4.239]],["title/controllers/UserController.html",[101,1.544,687,2.504]],["body/controllers/UserController.html",[0,0.021,3,0.146,4,0.129,5,0.129,10,0.163,12,1.156,13,0.911,15,1.844,18,0.476,19,0.021,23,0.73,28,1.428,29,1.286,30,1.22,31,2.011,34,0.424,36,0.146,37,1.283,66,0.011,67,0.011,101,1.642,103,1.091,106,1.859,108,0.709,111,1.503,112,0.923,113,1.859,175,1.765,179,2.939,181,1.859,184,3.508,186,2.936,218,2.193,219,2.106,220,1.95,221,1.399,222,1.769,223,1.091,224,1.503,226,1.95,227,2.193,228,1.95,229,2.193,231,3.302,234,1.95,237,2.936,240,1.865,428,1.503,429,1.95,432,1.624,441,2.534,449,2.193,452,1.95,454,1.769,518,3.686,586,3.686,681,3.936,687,2.663,688,2.193,689,3.971,690,3.971,691,3.971,692,2.193,693,2.563,694,2.563,695,2.563,696,2.563,697,2.563,698,2.193,699,2.563,700,2.563,701,2.563,702,2.563,703,2.563,704,2.193,705,2.193,706,2.193,707,1.624,708,2.193,709,2.563,710,4.64,711,2.563,712,4.64,713,2.563,714,2.563,715,2.563,716,2.563,717,2.563,718,2.563,719,2.563,720,2.563]],["title/entities/UserEnitity.html",[181,1.307,254,1.739]],["body/entities/UserEnitity.html",[0,0.025,3,0.174,4,0.154,5,0.154,10,0.195,11,0.884,12,0.687,15,0.848,18,0.603,19,0.02,20,1.358,21,1.873,23,0.924,34,0.328,35,0.941,36,0.174,37,0.848,66,0.012,67,0.012,75,2.07,86,2.812,90,3.834,97,2.333,98,2.323,106,2.355,175,1.674,181,1.585,241,2.788,254,2.11,255,3.264,256,1.798,269,3.767,279,3.554,296,1.942,360,4.407,387,3.767,520,2.63,521,2.812,533,3.554,534,3.554,563,2.624,564,2.116,579,2.624,652,3.35,721,2.624,722,3.065,723,3.065,724,3.065,725,3.065,726,3.065,727,3.065,728,3.065,729,3.065,730,3.065,731,3.065,732,3.065,733,4.401,734,4.401,735,4.401,736,4.401,737,2.624,738,3.065,739,3.065,740,3.065]],["title/interfaces/UserJwtPayload.html",[300,1.239,450,2.504]],["body/interfaces/UserJwtPayload.html",[3,0.264,4,0.233,5,0.233,10,0.295,11,1.169,18,0.586,19,0.02,20,1.407,34,0.295,36,0.264,66,0.016,67,0.016,75,2.679,98,3.006,175,2.417,300,1.582,301,2.368,450,4.013,456,3.199,520,3.403,537,4.977,741,3.967,742,6.354]],["title/modules/UserModule.html",[115,1.544,125,2.299]],["body/modules/UserModule.html",[0,0.034,3,0.235,4,0.208,5,0.208,19,0.02,34,0.432,36,0.235,66,0.015,67,0.015,103,2.299,108,1.143,115,2.299,117,2.11,118,2.759,125,4.386,126,3.168,127,2.423,128,2.423,130,3.422,131,2.617,141,2.617,142,1.864,181,1.488,221,2.95,222,2.851,223,1.758,441,3.966,452,3.144,623,3.536,687,4.154,743,3.536,744,3.536,745,3.536,746,4.131,747,5.402,748,4.131]],["title/interfaces/UserResponseInterface.html",[300,1.239,707,2.299]],["body/interfaces/UserResponseInterface.html",[3,0.288,4,0.255,5,0.255,10,0.322,11,1.235,19,0.02,20,1.018,34,0.322,36,0.288,66,0.017,67,0.017,219,2.614,300,1.73,301,2.588,459,3.857,707,3.893,749,4.337,750,5.259,751,5.067]],["title/injectables/UserService.html",[157,1.175,441,1.981]],["body/injectables/UserService.html",[0,0.016,3,0.111,4,0.099,5,0.099,10,0.125,12,1.225,13,0.74,15,1.728,18,0.504,19,0.021,20,0.629,23,0.773,28,1.513,29,1.363,30,1.231,31,1.84,34,0.382,35,0.602,36,0.111,37,1.513,57,1.837,66,0.009,67,0.009,75,1.797,98,1.765,108,0.542,112,0.706,113,1.877,142,0.884,157,1.014,158,1.001,175,1.982,181,2.047,219,2.161,223,0.834,240,2.285,291,2.441,307,1.352,309,1.984,311,2.832,312,2.384,317,2.681,335,1.241,336,1.241,337,1.352,341,1.491,355,3.402,399,1.677,402,2.479,441,1.71,456,1.352,459,1.491,464,1.677,473,2.681,488,3.349,518,3.302,520,2.496,521,1.71,533,1.352,534,1.352,564,1.352,586,3.096,630,1.677,640,1.677,681,3.601,689,2.681,690,2.681,691,3.349,692,2.681,698,2.681,704,1.677,705,1.677,706,1.677,707,2.479,708,1.677,737,1.677,752,1.677,753,3.132,754,3.132,755,3.132,756,1.959,757,3.132,758,1.959,759,1.959,760,3.132,761,1.959,762,3.132,763,1.959,764,1.959,765,1.959,766,1.959,767,3.132,768,3.132,769,3.913,770,1.959,771,3.913,772,1.959,773,3.132,774,1.959,775,3.132,776,3.132,777,1.959,778,3.913,779,1.959,780,1.959,781,1.959,782,1.959,783,1.959,784,3.132,785,1.959,786,3.913,787,1.959,788,1.959,789,1.959,790,1.959,791,1.959]],["title/coverage.html",[792,3.769]],["body/coverage.html",[0,0.055,1,1.916,5,0.127,6,2.155,7,2.155,18,0.232,19,0.02,39,1.286,66,0.01,67,0.01,68,1.916,69,2.155,70,2.155,80,1.916,81,2.155,82,2.155,91,1.916,92,2.155,93,2.155,101,2.338,102,1.737,104,2.155,109,1.476,144,1.916,149,1.737,157,1.943,159,2.155,163,1.737,164,2.155,181,0.907,182,1.595,184,1.595,196,1.595,210,1.476,214,1.595,216,1.595,219,0.957,221,1.375,254,2.453,255,1.286,257,2.155,277,4.347,291,1.375,297,1.375,300,2.049,302,2.155,303,2.155,416,2.155,419,1.916,421,2.155,428,1.476,438,2.155,441,1.375,450,1.737,468,2.155,494,2.155,500,1.916,501,2.155,502,2.155,509,1.916,510,2.155,511,2.155,518,1.595,519,2.155,527,1.916,528,2.155,529,2.155,536,2.155,538,2.155,548,2.155,552,1.737,553,2.155,554,1.916,555,2.155,556,2.155,559,1.476,586,1.595,587,2.155,590,1.737,591,2.155,606,1.476,608,1.595,624,2.155,628,2.155,654,1.737,655,2.155,657,1.476,664,2.155,674,2.155,681,1.595,682,2.155,687,1.737,688,2.155,707,1.595,721,2.155,741,2.155,749,2.155,752,2.155,792,1.916,793,2.517,794,2.517,795,2.517,796,6.326,797,2.517,798,6.001,799,2.517,800,4.59,801,3.806,802,5.779,803,2.155,804,3.806,805,2.155,806,2.517,807,2.155,808,6.448,809,2.155,810,2.517,811,2.517]],["title/dependencies.html",[118,2.229,812,2.593]],["body/dependencies.html",[0,0.047,19,0.02,35,1.368,66,0.015,67,0.015,108,1.232,115,1.895,118,2.275,142,2.01,147,3.812,339,3.812,431,3.812,454,3.074,456,3.074,475,3.812,480,3.39,482,2.612,564,3.074,813,6.567,814,4.454,815,4.454,816,4.454,817,4.454,818,4.454,819,4.454,820,4.454,821,4.454,822,4.454,823,4.454,824,4.454,825,4.454,826,4.454,827,4.454,828,4.454,829,4.454,830,4.454,831,4.454,832,4.454,833,4.454,834,4.454,835,4.454]],["title/miscellaneous/functions.html",[836,1.777,837,3.735]],["body/miscellaneous/functions.html",[10,0.356,19,0.018,66,0.018,67,0.018,805,4.784,807,5.899,836,3.278,837,4.784,838,5.589]],["title/index.html",[10,0.193,839,3.029,840,3.029]],["body/index.html",[4,0.199,19,0.02,66,0.014,67,0.014,258,2.322,260,2.322,311,2.508,792,3.013,841,3.959,842,3.959,843,5.253,844,3.959,845,3.959,846,3.959,847,3.959,848,3.959,849,3.959,850,5.894,851,3.959,852,3.959,853,3.959,854,6.851,855,3.959,856,3.959,857,3.959,858,6.715,859,3.959,860,3.959,861,5.253,862,3.959,863,3.959,864,3.959,865,3.959,866,5.253,867,5.253,868,3.959,869,3.959,870,3.959,871,5.253,872,5.253,873,3.959,874,3.959,875,3.959,876,3.959,877,3.959,878,3.389,879,3.959,880,3.959,881,3.959,882,3.959,883,3.959,884,3.959,885,3.959,886,3.959,887,3.959,888,3.959,889,3.959,890,3.959,891,3.959,892,3.959,893,3.959,894,3.959,895,3.389]],["title/modules.html",[117,2.53]],["body/modules.html",[19,0.017,66,0.017,67,0.017,116,3.545,117,2.623,122,3.254,123,3.254,124,3.254,125,3.254,878,6.049,896,7.067,897,7.067,898,7.067]],["title/overview.html",[899,4.239]],["body/overview.html",[2,1.411,19,0.02,66,0.014,67,0.014,103,1.667,109,3.439,116,4.973,117,2.002,118,2.665,119,3.354,120,3.354,121,3.354,122,4.125,123,4.125,124,4.125,125,4.242,126,3.059,127,2.298,128,2.298,158,2.002,210,3.439,256,2.298,292,3.354,293,3.354,301,2.002,396,2.982,419,2.982,441,3.732,606,3.439,619,3.354,620,3.354,657,3.439,667,3.354,668,3.354,743,3.354,744,3.354,745,3.354,899,3.354,900,5.216,901,3.918,902,5.216,903,3.918]],["title/properties.html",[11,0.877,812,2.593]],["body/properties.html",[11,1.107,19,0.02,66,0.018,67,0.018,258,3.23,260,3.23,895,4.714,904,5.508,905,5.508,906,5.508]],["title/miscellaneous/typealiases.html",[836,1.777,907,4.364]],["body/miscellaneous/typealiases.html",[10,0.339,18,0.491,19,0.017,66,0.017,67,0.017,417,5.419,625,5.419,626,4.818,750,5.419,836,3.125,908,5.328,909,5.328,910,5.328,911,5.328,912,5.328,913,5.328,914,5.328]],["title/miscellaneous/variables.html",[836,1.777,915,3.735]],["body/miscellaneous/variables.html",[10,0.272,18,0.509,19,0.02,21,2.349,22,2.49,43,2.181,66,0.015,67,0.015,98,1.927,113,2.203,144,4.201,167,2.947,219,2.099,240,1.717,256,2.504,424,3.655,432,2.706,434,4.724,521,2.332,652,3.25,803,3.655,809,3.655,836,2.504,915,3.655,916,4.271,917,4.271,918,4.271,919,4.271,920,4.271,921,4.271,922,4.271,923,4.271,924,4.271,925,4.271,926,5.519,927,4.271,928,5.519,929,4.271,930,4.271,931,4.271,932,4.271,933,4.271,934,4.271,935,4.271,936,4.271,937,4.271,938,4.271,939,4.271]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":277,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/FindAllQueryDto.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":415,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":905,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":396,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"overview.html":{}}}],["1.6.5",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":579,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{}}}],["123456",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":903,"title":{},"body":{"overview.html":{}}}],["16.0.1",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":543,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["3.0.2",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":901,"title":{},"body":{"overview.html":{}}}],["5",{"_index":900,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":414,"title":{},"body":{"injectables/ArticleService.html":{}}}],["6.0.4",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":902,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":444,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["acc",{"_index":493,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["acc[error.property",{"_index":491,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["action",{"_index":89,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["add",{"_index":52,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{}}}],["addarticletofavorites",{"_index":166,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["addarticletofavorites(currentuserid",{"_index":174,"title":{},"body":{"controllers/ArticleController.html":{}}}],["addarticletofavorites(slug",{"_index":316,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addfavoritesrelationsbetweenarticleanduser.ts",{"_index":7,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"coverage.html":{}}}],["addfavoritesrelationsbetweenarticleanduser.ts:14",{"_index":27,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["addfavoritesrelationsbetweenarticleanduser.ts:4",{"_index":24,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["addfavoritesrelationsbetweenarticleanduser.ts:6",{"_index":33,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["addfavoritesrelationsbetweenarticleanduser1658659352075",{"_index":1,"title":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"coverage.html":{}}}],["addfollowsrelationtable.ts",{"_index":70,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"coverage.html":{}}}],["addfollowsrelationtable.ts:10",{"_index":72,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{}}}],["addfollowsrelationtable.ts:4",{"_index":71,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{}}}],["addfollowsrelationtable.ts:6",{"_index":73,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{}}}],["addfollowsrelationtable1658668825878",{"_index":68,"title":{"classes/AddFollowsRelationTable1658668825878.html":{}},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"coverage.html":{}}}],["addrelationsbetweenarticleanduser.ts",{"_index":82,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"coverage.html":{}}}],["addrelationsbetweenarticleanduser.ts:11",{"_index":84,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["addrelationsbetweenarticleanduser.ts:4",{"_index":83,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["addrelationsbetweenarticleanduser.ts:6",{"_index":85,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["addrelationsbetweenarticleanduser1658591658979",{"_index":80,"title":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"coverage.html":{}}}],["addusernametousers.ts",{"_index":93,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"coverage.html":{}}}],["addusernametousers.ts:10",{"_index":95,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{}}}],["addusernametousers.ts:4",{"_index":94,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{}}}],["addusernametousers.ts:6",{"_index":96,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{}}}],["addusernametousers1658152414900",{"_index":91,"title":{"classes/AddUsernameToUsers1658152414900.html":{}},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"coverage.html":{}}}],["alias",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["aliases",{"_index":908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":879,"title":{},"body":{"index.html":{}}}],["app",{"_index":856,"title":{},"body":{"index.html":{}}}],["app/app.controller",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["app/app.service",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app/article/article.controller",{"_index":295,"title":{},"body":{"modules/ArticleModule.html":{}}}],["app/article/article.entity",{"_index":296,"title":{},"body":{"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{}}}],["app/article/article.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["app/article/article.service",{"_index":211,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["app/article/dto/createarticle.dto",{"_index":212,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["app/article/dto/findallarticlesquery.dto",{"_index":213,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["app/article/types/article.type",{"_index":418,"title":{},"body":{"interfaces/ArticlesResponseInterface.html":{}}}],["app/article/types/articleresponse.interface",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["app/article/types/articlesresponse.interface",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["app/common/pipes/backendvalidation.pipe",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["app/config/orm.config",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["app/config/ormseeddatasource.config",{"_index":562,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["app/profile/follow.entity",{"_index":298,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app/profile/profile.controller",{"_index":622,"title":{},"body":{"modules/ProfileModule.html":{}}}],["app/profile/profile.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["app/profile/profile.service",{"_index":607,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["app/profile/types/profile.type",{"_index":627,"title":{},"body":{"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{}}}],["app/profile/types/profileresponse.interface",{"_index":609,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["app/tag/tag.controller",{"_index":670,"title":{},"body":{"modules/TagModule.html":{}}}],["app/tag/tag.entity",{"_index":560,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["app/tag/tag.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["app/tag/tag.service",{"_index":658,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["app/tag/types/tagsresponse.interface",{"_index":659,"title":{},"body":{"controllers/TagController.html":{}}}],["app/types/expressrequest.interface",{"_index":429,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"controllers/UserController.html":{}}}],["app/user/decorators/user.decorator",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["app/user/dto/createuser.dto",{"_index":704,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["app/user/dto/loginuser.dto",{"_index":705,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["app/user/dto/updateuser.dto",{"_index":706,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["app/user/guards/auth.guard",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["app/user/middlewares/auth.middleware",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/types/user.type",{"_index":751,"title":{},"body":{"interfaces/UserResponseInterface.html":{}}}],["app/user/types/userjwtpayload.interface",{"_index":451,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["app/user/types/userresponse.interface",{"_index":708,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["app/user/user.controller",{"_index":748,"title":{},"body":{"modules/UserModule.html":{}}}],["app/user/user.entity",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"interfaces/ExpressRequest.html":{},"classes/InitialSeed1658665867977.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["app/user/user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["app/user/user.service",{"_index":452,"title":{},"body":{"injectables/AuthMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["appcontroller",{"_index":102,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":849,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":116,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":476,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["array",{"_index":283,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{}}}],["article.author",{"_index":387,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEnitity.html":{}}}],["article.author.id",{"_index":406,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.favoritescount",{"_index":398,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":395,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.slug",{"_index":385,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":384,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontroller",{"_index":163,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articleentity",{"_index":255,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{},"coverage.html":{}}}],["articleindex",{"_index":400,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":393,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":394,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":122,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":315,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleresponseinterface",{"_index":214,"title":{"interfaces/ArticleResponseInterface.html":{}},"body":{"controllers/ArticleController.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articles",{"_index":86,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"classes/CreateArticles1658590819603.html":{},"entities/UserEnitity.html":{}}}],["articles\"(\"id",{"_index":61,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["articles.map((article",{"_index":374,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":370,"title":{},"body":{"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{}}}],["articleservice",{"_index":210,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesid",{"_index":44,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["articlesresponseinterface",{"_index":216,"title":{"interfaces/ArticlesResponseInterface.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"coverage.html":{}}}],["articletype",{"_index":417,"title":{},"body":{"interfaces/ArticlesResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["articlewithfavorited",{"_index":373,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["authguard",{"_index":221,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/AuthGuard.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authmiddleware",{"_index":149,"title":{"injectables/AuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["author",{"_index":258,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/FindAllQueryDto.html":{},"classes/InitialSeed1658665867977.html":{},"index.html":{},"properties.html":{}}}],["author.id",{"_index":357,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authorid",{"_index":87,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["authorized",{"_index":436,"title":{},"body":{"guards/AuthGuard.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["backendvalidationpipe",{"_index":184,"title":{"injectables/BackendValidationPipe.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/BackendValidationPipe.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["backers",{"_index":880,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":564,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["beforeinsert",{"_index":733,"title":{},"body":{"entities/UserEnitity.html":{}}}],["beforeupdate",{"_index":287,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["bio",{"_index":533,"title":{},"body":{"classes/CreateUsers1658070509018.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["body",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/UserController.html":{}}}],["body('article",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body('user",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":427,"title":{},"body":{"guards/AuthGuard.html":{}}}],["boolean(follow",{"_index":642,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":898,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":896,"title":{},"body":{"modules.html":{}}}],["buildarticleresponse",{"_index":304,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":319,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":844,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":629,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":632,"title":{},"body":{"injectables/ProfileService.html":{}}}],["builduserresponse",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["builduserresponse(user",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["canactivate",{"_index":422,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":423,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cant",{"_index":644,"title":{},"body":{"injectables/ProfileService.html":{}}}],["cascade",{"_index":58,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["catch",{"_index":466,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["character",{"_index":99,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["class",{"_index":0,"title":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":292,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":293,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":619,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":620,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":667,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_providers",{"_index":668,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":743,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":745,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":744,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["coffee",{"_index":571,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["column",{"_index":90,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{}}}],["column('simple",{"_index":282,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":269,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEnitity.html":{}}}],["column({select",{"_index":730,"title":{},"body":{"entities/UserEnitity.html":{}}}],["column({type",{"_index":272,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["compare",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["configmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(user",{"_index":580,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["const",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":45,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["constructor",{"_index":309,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["constructor(articlerepository",{"_index":310,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(private",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/AuthMiddleware.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(tagrepository",{"_index":675,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":630,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":440,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["consumer",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(authmiddleware).forroutes",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":426,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":433,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":101,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":230,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profiles",{"_index":610,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":660,"title":{},"body":{"controllers/TagController.html":{}}}],["controllers",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":792,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":167,"title":{},"body":{"controllers/ArticleController.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"miscellaneous/variables.html":{}}}],["create(currentuser",{"_index":180,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticle",{"_index":305,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createarticle(currentuser",{"_index":321,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createarticledto",{"_index":182,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["createarticles.ts",{"_index":502,"title":{},"body":{"classes/CreateArticles1658590819603.html":{},"coverage.html":{}}}],["createarticles.ts:10",{"_index":504,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["createarticles.ts:4",{"_index":503,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["createarticles.ts:6",{"_index":505,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["createarticles1658590819603",{"_index":500,"title":{"classes/CreateArticles1658590819603.html":{}},"body":{"classes/CreateArticles1658590819603.html":{},"coverage.html":{}}}],["createdat",{"_index":259,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticles1658590819603.html":{}}}],["createparamdecorator((data",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":566,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["createquerybuilder('articles",{"_index":345,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createtags.ts",{"_index":511,"title":{},"body":{"classes/CreateTags1658063174837.html":{},"coverage.html":{}}}],["createtags.ts:12",{"_index":513,"title":{},"body":{"classes/CreateTags1658063174837.html":{}}}],["createtags.ts:4",{"_index":512,"title":{},"body":{"classes/CreateTags1658063174837.html":{}}}],["createtags.ts:6",{"_index":514,"title":{},"body":{"classes/CreateTags1658063174837.html":{}}}],["createtags1658063174837",{"_index":509,"title":{"classes/CreateTags1658063174837.html":{}},"body":{"classes/CreateTags1658063174837.html":{},"coverage.html":{}}}],["createuser",{"_index":689,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":692,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":518,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["createusers.ts",{"_index":529,"title":{},"body":{"classes/CreateUsers1658070509018.html":{},"coverage.html":{}}}],["createusers.ts:12",{"_index":531,"title":{},"body":{"classes/CreateUsers1658070509018.html":{}}}],["createusers.ts:4",{"_index":530,"title":{},"body":{"classes/CreateUsers1658070509018.html":{}}}],["createusers.ts:6",{"_index":532,"title":{},"body":{"classes/CreateUsers1658070509018.html":{}}}],["createusers1658070509018",{"_index":527,"title":{"classes/CreateUsers1658070509018.html":{}},"body":{"classes/CreateUsers1658070509018.html":{},"coverage.html":{}}}],["ctx",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":274,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["currentuser",{"_index":186,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/UserController.html":{}}}],["currentuser(@user",{"_index":716,"title":{},"body":{"controllers/UserController.html":{}}}],["currentuser(user",{"_index":695,"title":{},"body":{"controllers/UserController.html":{}}}],["currentuser.favorites.map((favorite",{"_index":368,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":179,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{}}}],["data",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource",{"_index":561,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["datasourceoptions",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":271,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["decode",{"_index":462,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["decorators",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"entities/ArticleEntity.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"entities/UserEnitity.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":57,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["delete(':slug",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(authguard",{"_index":188,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/unfavorite",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/unfavorite')@useguards(authguard",{"_index":192,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username/follow",{"_index":617,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(authguard",{"_index":604,"title":{},"body":{"controllers/ProfileController.html":{}}}],["deletearticle",{"_index":168,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticle(currentuserid",{"_index":187,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":323,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites",{"_index":169,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":191,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":325,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deleteresult",{"_index":338,"title":{},"body":{"injectables/ArticleService.html":{}}}],["dependencies",{"_index":118,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":672,"title":{},"body":{"modules/TagModule.html":{}}}],["desc",{"_index":348,"title":{},"body":{"injectables/ArticleService.html":{},"classes/InitialSeed1658665867977.html":{}}}],["description",{"_index":260,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/InitialSeed1658665867977.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":857,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["dragons",{"_index":570,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["drop",{"_index":62,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{}}}],["e2e",{"_index":868,"title":{},"body":{"index.html":{}}}],["eager",{"_index":267,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["efficient",{"_index":845,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":363,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":256,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":254,"title":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":645,"title":{},"body":{"injectables/ProfileService.html":{}}}],["err",{"_index":467,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["error",{"_index":490,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["errorresponse",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["errorresponse.errors['email",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["errorresponse.errors['username",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["errors",{"_index":473,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"injectables/UserService.html":{}}}],["errors.length",{"_index":486,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["errors.reduce((acc",{"_index":489,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["execute",{"_index":573,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["executioncontext",{"_index":424,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":404,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":747,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":454,"title":{},"body":{"injectables/AuthMiddleware.html":{},"interfaces/ExpressRequest.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["expressrequest",{"_index":428,"title":{"interfaces/ExpressRequest.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"interfaces/ExpressRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["extends",{"_index":537,"title":{},"body":{"interfaces/ExpressRequest.html":{},"interfaces/UserJwtPayload.html":{}}}],["false",{"_index":652,"title":{},"body":{"injectables/ProfileService.html":{},"entities/UserEnitity.html":{},"miscellaneous/variables.html":{}}}],["favorite.id",{"_index":369,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":375,"title":{},"body":{"injectables/ArticleService.html":{},"classes/FindAllQueryDto.html":{}}}],["favoriteids",{"_index":367,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":376,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":360,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEnitity.html":{}}}],["favoritescount",{"_index":261,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticles1658590819603.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":170,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["findall(currentuserid",{"_index":194,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["findallquerydto",{"_index":196,"title":{"classes/FindAllQueryDto.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/FindAllQueryDto.html":{},"coverage.html":{}}}],["findbyid",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyslug",{"_index":306,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":328,"title":{},"body":{"injectables/ArticleService.html":{}}}],["first",{"_index":583,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["fk_61dc60abcf0035e5ce2aea013bc",{"_index":60,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["fk_65d9ccc1b02f4d904e90bd76a34",{"_index":88,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["fk_b3bc5ca3e98f5f3858dbf626ad6",{"_index":53,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["follow",{"_index":638,"title":{},"body":{"injectables/ProfileService.html":{}}}],["follow.followingid",{"_index":381,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followentity",{"_index":297,"title":{"entities/FollowEntity.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":643,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":77,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":641,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followingid",{"_index":78,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followinguserids",{"_index":379,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followprofile",{"_index":593,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":596,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":313,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["follows",{"_index":74,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{}}}],["follows.length",{"_index":378,"title":{},"body":{"injectables/ArticleService.html":{}}}],["follows.map((follow",{"_index":380,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followtocreate",{"_index":647,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":648,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":649,"title":{},"body":{"injectables/ProfileService.html":{}}}],["foreign",{"_index":54,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["formaterrors",{"_index":469,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["formaterrors(errors",{"_index":470,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["framework",{"_index":843,"title":{},"body":{"index.html":{}}}],["function",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":837,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatejwt",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["generatejwt(user",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["get(':slug",{"_index":204,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":601,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('feed",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('feed')@useguards(authguard)@usepipes(new",{"_index":201,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('user",{"_index":715,"title":{},"body":{"controllers/UserController.html":{}}}],["get('user')@useguards(authguard",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@usepipes(new",{"_index":197,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getfeed",{"_index":171,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getfeed(currentuserid",{"_index":200,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["gethello",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":594,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":600,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrepository(articleentity",{"_index":581,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["getrepository(tagentity",{"_index":565,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["getrepository(userenitity",{"_index":574,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["getsinglearticle",{"_index":172,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getsinglearticle(slug",{"_index":203,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getslug",{"_index":308,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":331,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getting",{"_index":839,"title":{"index.html":{}},"body":{}}],["grow",{"_index":875,"title":{},"body":{"index.html":{}}}],["guard",{"_index":419,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":420,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hash",{"_index":563,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"entities/UserEnitity.html":{}}}],["hash('jakejake",{"_index":578,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["hash(this.password",{"_index":740,"title":{},"body":{"entities/UserEnitity.html":{}}}],["hashpassword",{"_index":738,"title":{},"body":{"entities/UserEnitity.html":{}}}],["hello",{"_index":161,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":886,"title":{},"body":{"index.html":{}}}],["host",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":335,"title":{},"body":{"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["httpexception(\"you're",{"_index":407,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('article",{"_index":403,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('not",{"_index":435,"title":{},"body":{"guards/AuthGuard.html":{}}}],["httpexception('profile",{"_index":637,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception(errorresponse",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":892,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":336,"title":{},"body":{"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":646,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":408,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":405,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.unauthorized",{"_index":437,"title":{},"body":{"guards/AuthGuard.html":{}}}],["httpstatus.unprocessable_entity",{"_index":488,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"injectables/UserService.html":{}}}],["id",{"_index":75,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":361,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":364,"title":{},"body":{"injectables/ArticleService.html":{}}}],["idx_61dc60abcf0035e5ce2aea013b",{"_index":50,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["idx_b3bc5ca3e98f5f3858dbf626ad",{"_index":49,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["image",{"_index":534,"title":{},"body":{"classes/CreateUsers1658070509018.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{}}}],["initialseed.ts",{"_index":556,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"coverage.html":{}}}],["initialseed.ts:60",{"_index":557,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["initialseed.ts:9",{"_index":558,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["initialseed1658665867977",{"_index":554,"title":{"classes/InitialSeed1658665867977.html":{}},"body":{"classes/InitialSeed1658665867977.html":{},"coverage.html":{}}}],["injectable",{"_index":157,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":158,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injection",{"_index":673,"title":{},"body":{"modules/TagModule.html":{}}}],["injectrepository",{"_index":337,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["injectrepository(articleentity",{"_index":340,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":342,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":679,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userenitity",{"_index":341,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["insert",{"_index":567,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["installation",{"_index":853,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":855,"title":{},"body":{"index.html":{}}}],["integer",{"_index":42,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/CreateArticles1658590819603.html":{}}}],["interface",{"_index":300,"title":{"interfaces/ArticleResponseInterface.html":{},"interfaces/ArticlesResponseInterface.html":{},"interfaces/ExpressRequest.html":{},"interfaces/ITagsResponse.html":{},"interfaces/ProfileResponseInterface.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{}},"body":{"interfaces/ArticleResponseInterface.html":{},"interfaces/ArticlesResponseInterface.html":{},"interfaces/ExpressRequest.html":{},"interfaces/ITagsResponse.html":{},"interfaces/ProfileResponseInterface.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":301,"title":{},"body":{"interfaces/ArticleResponseInterface.html":{},"interfaces/ArticlesResponseInterface.html":{},"interfaces/ExpressRequest.html":{},"interfaces/ITagsResponse.html":{},"interfaces/ProfileResponseInterface.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{},"overview.html":{}}}],["into(articleentity",{"_index":582,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["into(tagentity",{"_index":568,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["into(userenitity",{"_index":575,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["invalid",{"_index":783,"title":{},"body":{"injectables/UserService.html":{}}}],["isemail",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty",{"_index":495,"title":{},"body":{"classes/CreateArticleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["isnotfavorited",{"_index":391,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ispasswordcorrect",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["itagsresponse",{"_index":552,"title":{"interfaces/ITagsResponse.html":{}},"body":{"interfaces/ITagsResponse.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["jacob",{"_index":576,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["jake@jake.jake",{"_index":577,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["join",{"_index":882,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":734,"title":{},"body":{"entities/UserEnitity.html":{}}}],["jsonwebtoken",{"_index":456,"title":{},"body":{"injectables/AuthMiddleware.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["jwtpayload",{"_index":742,"title":{},"body":{"interfaces/UserJwtPayload.html":{}}}],["kamil",{"_index":889,"title":{},"body":{"index.html":{}}}],["key",{"_index":48,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["leftjoinandselect('articles.author",{"_index":346,"title":{},"body":{"injectables/ArticleService.html":{}}}],["license",{"_index":895,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":872,"title":{},"body":{"index.html":{}}}],["limit",{"_index":539,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["limit(query.limit",{"_index":349,"title":{},"body":{"injectables/ArticleService.html":{}}}],["localhost",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":690,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login(loginuserdto",{"_index":698,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["loginuserdto",{"_index":586,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuserdto.email",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["loginuserdto.password",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["lower",{"_index":411,"title":{},"body":{"injectables/ArticleService.html":{}}}],["manytomany",{"_index":735,"title":{},"body":{"entities/UserEnitity.html":{}}}],["manytomany(undefined)@jointable",{"_index":726,"title":{},"body":{"entities/UserEnitity.html":{}}}],["manytoone",{"_index":288,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["manytoone(undefined",{"_index":265,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":413,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":412,"title":{},"body":{"injectables/ArticleService.html":{}}}],["metadata",{"_index":475,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"dependencies.html":{}}}],["method",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["migrations",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/**/*{.ts,.js",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":836,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":871,"title":{},"body":{"index.html":{}}}],["mode",{"_index":861,"title":{},"body":{"index.html":{}}}],["module",{"_index":115,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["modules",{"_index":117,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":885,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":890,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":850,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":894,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":572,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["nestjs/common",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":453,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["new",{"_index":291,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":446,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["nextfunction",{"_index":447,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["node.js",{"_index":842,"title":{},"body":{"index.html":{}}}],["now",{"_index":507,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["npm",{"_index":854,"title":{},"body":{"index.html":{}}}],["null",{"_index":43,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":175,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{}}}],["number.parseint(value",{"_index":547,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["object",{"_index":483,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["object.assign(article",{"_index":383,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.assign(newuser",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["object.assign(user",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["object.values(error.constraints",{"_index":492,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["observable",{"_index":430,"title":{},"body":{"guards/AuthGuard.html":{}}}],["offset",{"_index":540,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["offset(query.offset",{"_index":350,"title":{},"body":{"injectables/ArticleService.html":{}}}],["omit",{"_index":625,"title":{},"body":{"interfaces/ProfileResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["onetomany",{"_index":736,"title":{},"body":{"entities/UserEnitity.html":{}}}],["onetomany(undefined",{"_index":722,"title":{},"body":{"entities/UserEnitity.html":{}}}],["open",{"_index":873,"title":{},"body":{"index.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["orderby('articles.createdat",{"_index":347,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ormconfig",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":899,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":812,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["param('slug",{"_index":244,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":611,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["path.join(__dirname",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["pipetransform",{"_index":478,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["pk_0a6e2c450d83e0b6052c2793334",{"_index":508,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["pk_8988f607744e16ff79da3b8a627",{"_index":79,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{}}}],["pk_a3ffb1c0c8416b9fc6f907b7433",{"_index":535,"title":{},"body":{"classes/CreateUsers1658070509018.html":{}}}],["pk_aebb5070a5fa58957adae6d78af",{"_index":46,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["pk_e7dc17249a1148a1970748eda99",{"_index":517,"title":{},"body":{"classes/CreateTags1658063174837.html":{}}}],["plaintoinstance",{"_index":479,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["plaintoinstance(metadata.metatype",{"_index":484,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["please",{"_index":883,"title":{},"body":{"index.html":{}}}],["port",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["post(':slug/favorite",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(authguard",{"_index":177,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":615,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(authguard",{"_index":598,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('users",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["post('users')@usepipes(new",{"_index":693,"title":{},"body":{"controllers/UserController.html":{}}}],["post('users/login",{"_index":713,"title":{},"body":{"controllers/UserController.html":{}}}],["post('users/login')@usepipes(new",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@useguards(authguard)@usepipes(new",{"_index":183,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":165,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{}}}],["primary",{"_index":47,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["primarygeneratedcolumn",{"_index":279,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEnitity.html":{}}}],["private",{"_index":307,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":464,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/UserService.html":{}}}],["production",{"_index":863,"title":{},"body":{"index.html":{}}}],["profile",{"_index":612,"title":{},"body":{"controllers/ProfileController.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{}}}],["profile.email",{"_index":653,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profilecontroller",{"_index":590,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":123,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileresponseinterface",{"_index":608,"title":{"interfaces/ProfileResponseInterface.html":{}},"body":{"controllers/ProfileController.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["profiles",{"_index":592,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profileservice",{"_index":606,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profiletype",{"_index":626,"title":{},"body":{"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"miscellaneous/typealiases.html":{}}}],["profileusername",{"_index":597,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progressive",{"_index":841,"title":{},"body":{"index.html":{}}}],["project",{"_index":874,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"entities/ArticleEntity.html":{},"interfaces/ArticleResponseInterface.html":{},"interfaces/ArticlesResponseInterface.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/LoginUserDto.html":{},"interfaces/ProfileResponseInterface.html":{},"entities/TagEntity.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{},"properties.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["public\".\"idx_61dc60abcf0035e5ce2aea013b",{"_index":64,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["public\".\"idx_b3bc5ca3e98f5f3858dbf626ad",{"_index":65,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["put",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":248,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(authguard)@usepipes(new",{"_index":208,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put('user",{"_index":717,"title":{},"body":{"controllers/UserController.html":{}}}],["put('user')@useguards(authguard",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":195,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":354,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.favorited",{"_index":358,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":351,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":343,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1",{"_index":366,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":356,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.id",{"_index":365,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":352,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":371,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":372,"title":{},"body":{"injectables/ArticleService.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["queryrunner.query",{"_index":515,"title":{},"body":{"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["queryrunner.query(`alter",{"_index":51,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{}}}],["queryrunner.query(`create",{"_index":38,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/CreateArticles1658590819603.html":{}}}],["queryrunner.query(`drop",{"_index":63,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["read",{"_index":884,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateArticleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realworld",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["realworlddbuser",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":55,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["reflect",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":359,"title":{},"body":{"injectables/ArticleService.html":{}}}],["repository",{"_index":311,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":449,"title":{},"body":{"injectables/AuthMiddleware.html":{},"controllers/UserController.html":{}}}],["req.headers.authorization",{"_index":457,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["req.headers.authorization.split",{"_index":460,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["req.user",{"_index":458,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["request",{"_index":432,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"interfaces/ExpressRequest.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":434,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestmethod",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":445,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["results",{"_index":66,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":858,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":431,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["scalable",{"_index":846,"title":{},"body":{"index.html":{}}}],["second",{"_index":585,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["select",{"_index":737,"title":{},"body":{"entities/UserEnitity.html":{},"injectables/UserService.html":{}}}],["serial",{"_index":76,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["server",{"_index":847,"title":{},"body":{"index.html":{}}}],["side",{"_index":848,"title":{},"body":{"index.html":{}}}],["sign",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":176,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticles1658590819603.html":{},"classes/InitialSeed1658665867977.html":{}}}],["slugify",{"_index":339,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":410,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"modules/UserModule.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":877,"title":{},"body":{"index.html":{}}}],["src/.../article.type.ts",{"_index":909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../orm.config.ts",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.type.ts",{"_index":910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.decorator.ts",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.type.ts",{"_index":911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:26",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":159,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":160,"title":{},"body":{"injectables/AppService.html":{}}}],["src/article/article.controller.ts",{"_index":164,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["src/article/article.controller.ts:109",{"_index":193,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:30",{"_index":199,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:40",{"_index":202,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:50",{"_index":185,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:62",{"_index":205,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:71",{"_index":189,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:81",{"_index":209,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.controller.ts:96",{"_index":178,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/article/article.entity.ts",{"_index":257,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["src/article/article.entity.ts:13",{"_index":280,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:16",{"_index":281,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:19",{"_index":285,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:22",{"_index":276,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:25",{"_index":270,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:28",{"_index":284,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:31",{"_index":278,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:34",{"_index":275,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:37",{"_index":286,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.entity.ts:45",{"_index":268,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/article/article.module.ts",{"_index":294,"title":{},"body":{"modules/ArticleModule.html":{}}}],["src/article/article.service.ts",{"_index":303,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["src/article/article.service.ts:121",{"_index":322,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:139",{"_index":329,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:14",{"_index":314,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:145",{"_index":318,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:171",{"_index":326,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:196",{"_index":324,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:213",{"_index":334,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:233",{"_index":320,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:237",{"_index":332,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:24",{"_index":327,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/article.service.ts:82",{"_index":330,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/article/dto/createarticle.dto.ts",{"_index":494,"title":{},"body":{"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["src/article/dto/createarticle.dto.ts:11",{"_index":496,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["src/article/dto/createarticle.dto.ts:13",{"_index":498,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["src/article/dto/createarticle.dto.ts:5",{"_index":499,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["src/article/dto/createarticle.dto.ts:8",{"_index":497,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts",{"_index":538,"title":{},"body":{"classes/FindAllQueryDto.html":{},"coverage.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts:11",{"_index":544,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts:14",{"_index":545,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts:4",{"_index":546,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts:6",{"_index":541,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["src/article/dto/findallarticlesquery.dto.ts:8",{"_index":542,"title":{},"body":{"classes/FindAllQueryDto.html":{}}}],["src/article/types/article.type.ts",{"_index":912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/article/types/articleresponse.interface.ts",{"_index":302,"title":{},"body":{"interfaces/ArticleResponseInterface.html":{},"coverage.html":{}}}],["src/article/types/articlesresponse.interface.ts",{"_index":416,"title":{},"body":{"interfaces/ArticlesResponseInterface.html":{},"coverage.html":{}}}],["src/common/pipes/backendvalidation.pipe.ts",{"_index":468,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/backendvalidation.pipe.ts:13",{"_index":477,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["src/common/pipes/backendvalidation.pipe.ts:27",{"_index":472,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["src/config/orm.config.ts",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":805,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1658063174837",{"_index":510,"title":{},"body":{"classes/CreateTags1658063174837.html":{},"coverage.html":{}}}],["src/migrations/1658070509018",{"_index":528,"title":{},"body":{"classes/CreateUsers1658070509018.html":{},"coverage.html":{}}}],["src/migrations/1658152414900",{"_index":92,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"coverage.html":{}}}],["src/migrations/1658590819603",{"_index":501,"title":{},"body":{"classes/CreateArticles1658590819603.html":{},"coverage.html":{}}}],["src/migrations/1658591658979",{"_index":81,"title":{},"body":{"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"coverage.html":{}}}],["src/migrations/1658659352075",{"_index":6,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"coverage.html":{}}}],["src/migrations/1658668825878",{"_index":69,"title":{},"body":{"classes/AddFollowsRelationTable1658668825878.html":{},"coverage.html":{}}}],["src/profile/follow.entity.ts",{"_index":548,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["src/profile/follow.entity.ts:12",{"_index":550,"title":{},"body":{"entities/FollowEntity.html":{}}}],["src/profile/follow.entity.ts:6",{"_index":551,"title":{},"body":{"entities/FollowEntity.html":{}}}],["src/profile/follow.entity.ts:9",{"_index":549,"title":{},"body":{"entities/FollowEntity.html":{}}}],["src/profile/profile.controller.ts",{"_index":591,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:19",{"_index":602,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:32",{"_index":599,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:45",{"_index":605,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":621,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":628,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:10",{"_index":631,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:18",{"_index":635,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:37",{"_index":634,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:70",{"_index":636,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:97",{"_index":633,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/types/profile.type.ts",{"_index":913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/profile/types/profileresponse.interface.ts",{"_index":624,"title":{},"body":{"interfaces/ProfileResponseInterface.html":{},"coverage.html":{}}}],["src/seeds/1658665867977",{"_index":555,"title":{},"body":{"classes/InitialSeed1658665867977.html":{},"coverage.html":{}}}],["src/tag/tag.controller.ts",{"_index":655,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/tag/tag.controller.ts:10",{"_index":656,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.entity.ts",{"_index":664,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["src/tag/tag.entity.ts:6",{"_index":665,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tag/tag.entity.ts:9",{"_index":666,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tag/tag.module.ts",{"_index":669,"title":{},"body":{"modules/TagModule.html":{}}}],["src/tag/tag.service.ts",{"_index":674,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/tag/tag.service.ts:13",{"_index":678,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:7",{"_index":676,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/types/tagsresponse.interface.ts",{"_index":553,"title":{},"body":{"interfaces/ITagsResponse.html":{},"coverage.html":{}}}],["src/types/expressrequest.interface.ts",{"_index":536,"title":{},"body":{"interfaces/ExpressRequest.html":{},"coverage.html":{}}}],["src/user/decorators/user.decorator.ts",{"_index":809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/createuser.dto.ts",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/createuser.dto.ts:12",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:5",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/createuser.dto.ts:9",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/loginuser.dto.ts",{"_index":587,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dto/loginuser.dto.ts:6",{"_index":588,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dto/loginuser.dto.ts:9",{"_index":589,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dto/updateuser.dto.ts",{"_index":682,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/updateuser.dto.ts:11",{"_index":685,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dto/updateuser.dto.ts:4",{"_index":686,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dto/updateuser.dto.ts:7",{"_index":684,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dto/updateuser.dto.ts:9",{"_index":683,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/guards/auth.guard.ts",{"_index":421,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/user/guards/auth.guard.ts:13",{"_index":425,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/user/middlewares/auth.middleware.ts",{"_index":438,"title":{},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["src/user/middlewares/auth.middleware.ts:12",{"_index":448,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/user/middlewares/auth.middleware.ts:9",{"_index":442,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/user/types/user.type.ts",{"_index":914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/user/types/userjwtpayload.interface.ts",{"_index":741,"title":{},"body":{"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["src/user/types/userresponse.interface.ts",{"_index":749,"title":{},"body":{"interfaces/UserResponseInterface.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":688,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:29",{"_index":694,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:38",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":703,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":721,"title":{},"body":{"entities/UserEnitity.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:16",{"_index":728,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:19",{"_index":725,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:22",{"_index":732,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:25",{"_index":724,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:28",{"_index":729,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:31",{"_index":731,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:39",{"_index":723,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.entity.ts:43",{"_index":727,"title":{},"body":{"entities/UserEnitity.html":{}}}],["src/user/user.module.ts",{"_index":746,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":752,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:76",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:85",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:92",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":859,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":862,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":864,"title":{},"body":{"index.html":{}}}],["started",{"_index":840,"title":{"index.html":{}},"body":{}}],["starter",{"_index":852,"title":{},"body":{"index.html":{}}}],["statements",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":887,"title":{},"body":{"index.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"interfaces/ITagsResponse.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{}}}],["support",{"_index":878,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":897,"title":{},"body":{"modules.html":{}}}],["sync",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":39,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"coverage.html":{}}}],["tables",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":353,"title":{},"body":{"injectables/ArticleService.html":{},"classes/FindAllQueryDto.html":{}}}],["tag.name",{"_index":663,"title":{},"body":{"controllers/TagController.html":{}}}],["tagcontroller",{"_index":654,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":559,"title":{"entities/TagEntity.html":{}},"body":{"classes/InitialSeed1658665867977.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":262,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/InitialSeed1658665867977.html":{}}}],["tagmodule",{"_index":124,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":677,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":516,"title":{},"body":{"classes/CreateTags1658063174837.html":{},"interfaces/ITagsResponse.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":662,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":657,"title":{"injectables/TagService.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["taken",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["test",{"_index":867,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":870,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":869,"title":{},"body":{"index.html":{}}}],["tests",{"_index":866,"title":{},"body":{"index.html":{}}}],["text",{"_index":506,"title":{},"body":{"classes/CreateArticles1658590819603.html":{}}}],["thanks",{"_index":876,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":344,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.delete",{"_index":409,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":389,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":388,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticle(slug",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findall(currentuserid",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getfeed(currentuserid",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.findbyid(userid",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbyslug(slug",{"_index":390,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":651,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.find",{"_index":377,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.findone",{"_index":639,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":650,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.formaterrors(errors",{"_index":487,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["this.generatejwt(user",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getslug(createarticledto.title",{"_index":386,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.password",{"_index":739,"title":{},"body":{"entities/UserEnitity.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":614,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":616,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":613,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":618,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.tagrepository.find",{"_index":680,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.findall",{"_index":661,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":290,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["this.userrepository.findone",{"_index":355,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":399,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UserService.html":{}}}],["this.userservice.builduserresponse(updateduser",{"_index":720,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.builduserresponse(user",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":711,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(decode.id",{"_index":465,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["this.userservice.login(loginuserdto",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser",{"_index":719,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":402,"title":{},"body":{"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/BackendValidationPipe.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":273,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticles1658590819603.html":{}}}],["title",{"_index":263,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/InitialSeed1658665867977.html":{}}}],["token",{"_index":459,"title":{},"body":{"injectables/AuthMiddleware.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{}}}],["touch",{"_index":888,"title":{},"body":{"index.html":{}}}],["transform",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/BackendValidationPipe.html":{},"classes/FindAllQueryDto.html":{}}}],["transform(value",{"_index":474,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["transformer",{"_index":480,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"classes/FindAllQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"guards/AuthGuard.html":{},"injectables/ProfileService.html":{}}}],["try",{"_index":461,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["twitter",{"_index":893,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"interfaces/ArticleResponseInterface.html":{},"injectables/ArticleService.html":{},"interfaces/ArticlesResponseInterface.html":{},"guards/AuthGuard.html":{},"injectables/AuthMiddleware.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUserDto.html":{},"classes/CreateUsers1658070509018.html":{},"interfaces/ExpressRequest.html":{},"classes/FindAllQueryDto.html":{},"entities/FollowEntity.html":{},"interfaces/ITagsResponse.html":{},"classes/InitialSeed1658665867977.html":{},"classes/LoginUserDto.html":{},"controllers/ProfileController.html":{},"interfaces/ProfileResponseInterface.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":907,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":35,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"entities/FollowEntity.html":{},"classes/InitialSeed1658665867977.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEnitity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([articleentity",{"_index":299,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":671,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userenitity",{"_index":623,"title":{},"body":{"modules/ProfileModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot(ormconfig",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":851,"title":{},"body":{"index.html":{}}}],["unfollowprofile",{"_index":595,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":603,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unit",{"_index":865,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":190,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/BackendValidationPipe.html":{}}}],["unlicensed",{"_index":906,"title":{},"body":{"properties.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/InitialSeed1658665867977.html":{}}}],["update",{"_index":59,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["updatearticle",{"_index":173,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":206,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":333,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":207,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatedat",{"_index":264,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/CreateArticles1658590819603.html":{}}}],["updateduser",{"_index":718,"title":{},"body":{"controllers/UserController.html":{}}}],["updatetimestamp",{"_index":289,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["updateuser",{"_index":691,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(currentuserid",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(userid",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":681,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["use",{"_index":439,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["use(req",{"_index":443,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["useguards",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["usepipes",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["usepipes(new",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthMiddleware.html":{},"interfaces/ExpressRequest.html":{},"classes/InitialSeed1658665867977.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user('id",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["user.articles",{"_index":266,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.email",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["user.favorites.findindex",{"_index":392,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.map((el",{"_index":362,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":397,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":401,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":640,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["user.identifiers[0].id",{"_index":584,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["user.password",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["user.username",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["userbyemail",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["userbyusername",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["usercontroller",{"_index":687,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userenitity",{"_index":181,"title":{"entities/UserEnitity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"interfaces/ExpressRequest.html":{},"classes/InitialSeed1658665867977.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEnitity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":317,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UserService.html":{}}}],["userjwtpayload",{"_index":450,"title":{"interfaces/UserJwtPayload.html":{}},"body":{"injectables/AuthMiddleware.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["usermodule",{"_index":125,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":98,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"injectables/ArticleService.html":{},"classes/CreateUserDto.html":{},"classes/InitialSeed1658665867977.html":{},"injectables/ProfileService.html":{},"classes/UpdateUserDto.html":{},"entities/UserEnitity.html":{},"interfaces/UserJwtPayload.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":312,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["userresponseinterface",{"_index":707,"title":{"interfaces/UserResponseInterface.html":{}},"body":{"controllers/UserController.html":{},"interfaces/UserResponseInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users",{"_index":97,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateUsers1658070509018.html":{},"entities/UserEnitity.html":{}}}],["users\"(\"id",{"_index":56,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{}}}],["users_favorites_articles",{"_index":40,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["userservice",{"_index":441,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersid",{"_index":41,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{}}}],["usertype",{"_index":750,"title":{},"body":{"interfaces/UserResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["validate",{"_index":481,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["validate(object",{"_index":485,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["validationerror",{"_index":471,"title":{},"body":{"injectables/BackendValidationPipe.html":{}}}],["validationpipe",{"_index":198,"title":{},"body":{"controllers/ArticleController.html":{}}}],["validator",{"_index":482,"title":{},"body":{"injectables/BackendValidationPipe.html":{},"classes/CreateArticleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{},"classes/AddFollowsRelationTable1658668825878.html":{},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{},"classes/AddUsernameToUsers1658152414900.html":{},"injectables/BackendValidationPipe.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{},"classes/FindAllQueryDto.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":569,"title":{},"body":{"classes/InitialSeed1658665867977.html":{}}}],["variable",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":915,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":100,"title":{},"body":{"classes/AddUsernameToUsers1658152414900.html":{},"classes/CreateArticles1658590819603.html":{},"classes/CreateTags1658063174837.html":{},"classes/CreateUsers1658070509018.html":{}}}],["verify",{"_index":455,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["verify(token",{"_index":463,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["version",{"_index":904,"title":{},"body":{"properties.html":{}}}],["void",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["watch",{"_index":860,"title":{},"body":{"index.html":{}}}],["website",{"_index":891,"title":{},"body":{"index.html":{}}}],["where('articles.authorid",{"_index":382,"title":{},"body":{"injectables/ArticleService.html":{}}}],["world",{"_index":162,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":881,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html":{"url":"classes/AddFavoritesRelationsBetweenArticleAndUser1658659352075.html","title":"class - AddFavoritesRelationsBetweenArticleAndUser1658659352075","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFavoritesRelationsBetweenArticleAndUser1658659352075\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658659352075-AddFavoritesRelationsBetweenArticleAndUser.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddFavoritesRelationsBetweenArticleAndUser1658659352075'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658659352075-AddFavoritesRelationsBetweenArticleAndUser.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658659352075-AddFavoritesRelationsBetweenArticleAndUser.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658659352075-AddFavoritesRelationsBetweenArticleAndUser.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddFavoritesRelationsBetweenArticleAndUser1658659352075 implements MigrationInterface {\n    name = 'AddFavoritesRelationsBetweenArticleAndUser1658659352075'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"users_favorites_articles\" (\"usersId\" integer NOT NULL, \"articlesId\" integer NOT NULL, CONSTRAINT \"PK_aebb5070a5fa58957adae6d78af\" PRIMARY KEY (\"usersId\", \"articlesId\"))`);\n        await queryRunner.query(`CREATE INDEX \"IDX_b3bc5ca3e98f5f3858dbf626ad\" ON \"users_favorites_articles\" (\"usersId\") `);\n        await queryRunner.query(`CREATE INDEX \"IDX_61dc60abcf0035e5ce2aea013b\" ON \"users_favorites_articles\" (\"articlesId\") `);\n        await queryRunner.query(`ALTER TABLE \"users_favorites_articles\" ADD CONSTRAINT \"FK_b3bc5ca3e98f5f3858dbf626ad6\" FOREIGN KEY (\"usersId\") REFERENCES \"users\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \"users_favorites_articles\" ADD CONSTRAINT \"FK_61dc60abcf0035e5ce2aea013bc\" FOREIGN KEY (\"articlesId\") REFERENCES \"articles\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"users_favorites_articles\" DROP CONSTRAINT \"FK_61dc60abcf0035e5ce2aea013bc\"`);\n        await queryRunner.query(`ALTER TABLE \"users_favorites_articles\" DROP CONSTRAINT \"FK_b3bc5ca3e98f5f3858dbf626ad6\"`);\n        await queryRunner.query(`DROP INDEX \"public\".\"IDX_61dc60abcf0035e5ce2aea013b\"`);\n        await queryRunner.query(`DROP INDEX \"public\".\"IDX_b3bc5ca3e98f5f3858dbf626ad\"`);\n        await queryRunner.query(`DROP TABLE \"users_favorites_articles\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFollowsRelationTable1658668825878.html":{"url":"classes/AddFollowsRelationTable1658668825878.html","title":"class - AddFollowsRelationTable1658668825878","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFollowsRelationTable1658668825878\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658668825878-AddFollowsRelationTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddFollowsRelationTable1658668825878'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658668825878-AddFollowsRelationTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658668825878-AddFollowsRelationTable.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658668825878-AddFollowsRelationTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddFollowsRelationTable1658668825878 implements MigrationInterface {\n    name = 'AddFollowsRelationTable1658668825878'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"follows\" (\"id\" SERIAL NOT NULL, \"followerId\" integer NOT NULL, \"followingId\" integer NOT NULL, CONSTRAINT \"PK_8988f607744e16ff79da3b8a627\" PRIMARY KEY (\"id\"))`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP TABLE \"follows\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddRelationsBetweenArticleAndUser1658591658979.html":{"url":"classes/AddRelationsBetweenArticleAndUser1658591658979.html","title":"class - AddRelationsBetweenArticleAndUser1658591658979","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRelationsBetweenArticleAndUser1658591658979\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658591658979-AddRelationsBetweenArticleAndUser.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddRelationsBetweenArticleAndUser1658591658979'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658591658979-AddRelationsBetweenArticleAndUser.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658591658979-AddRelationsBetweenArticleAndUser.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658591658979-AddRelationsBetweenArticleAndUser.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddRelationsBetweenArticleAndUser1658591658979 implements MigrationInterface {\n    name = 'AddRelationsBetweenArticleAndUser1658591658979'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"articles\" ADD \"authorId\" integer`);\n        await queryRunner.query(`ALTER TABLE \"articles\" ADD CONSTRAINT \"FK_65d9ccc1b02f4d904e90bd76a34\" FOREIGN KEY (\"authorId\") REFERENCES \"users\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"articles\" DROP CONSTRAINT \"FK_65d9ccc1b02f4d904e90bd76a34\"`);\n        await queryRunner.query(`ALTER TABLE \"articles\" DROP COLUMN \"authorId\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddUsernameToUsers1658152414900.html":{"url":"classes/AddUsernameToUsers1658152414900.html","title":"class - AddUsernameToUsers1658152414900","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddUsernameToUsers1658152414900\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658152414900-AddUsernameToUsers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddUsernameToUsers1658152414900'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658152414900-AddUsernameToUsers.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658152414900-AddUsernameToUsers.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658152414900-AddUsernameToUsers.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddUsernameToUsers1658152414900 implements MigrationInterface {\n    name = 'AddUsernameToUsers1658152414900'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"users\" ADD \"username\" character varying NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"users\" DROP COLUMN \"username\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from '@app/app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { AppController } from '@app/app.controller';\nimport { AppService } from '@app/app.service';\nimport { TagModule } from '@app/tag/tag.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from '@app/user/user.module';\nimport ormconfig from '@app/config/orm.config';\nimport { ConfigModule } from '@nestjs/config';\nimport * as path from 'path';\nimport { AuthMiddleware } from '@app/user/middlewares/auth.middleware';\nimport { ArticleModule } from '@app/article/article.module';\nimport { ProfileModule } from '@app/profile/profile.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(ormconfig),\n    TagModule,\n    UserModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AuthMiddleware).forRoutes({\n      path: '*',\n      method: RequestMethod.ALL,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                getSingleArticle\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(currentUser: UserEnitity, createArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AuthGuard)@UsePipes(new BackendValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                UserEnitity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/unfavorite')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(currentUserId: number, query: FindAllQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                FindAllQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: FindAllQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')@UseGuards(AuthGuard)@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                FindAllQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSingleArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(AuthGuard)@UsePipes(new BackendValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/article/article.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ArticleService } from '@app/article/article.service';\nimport { CreateArticleDto } from '@app/article/dto/CreateArticle.dto';\nimport { FindAllQueryDto } from '@app/article/dto/FindAllArticlesQuery.dto';\nimport { ArticleResponseInterface } from '@app/article/types/ArticleResponse.interface';\nimport { ArticlesResponseInterface } from '@app/article/types/ArticlesResponse.interface';\nimport { BackendValidationPipe } from '@app/common/pipes/BackendValidation.pipe';\nimport { User } from '@app/user/decorators/user.decorator';\nimport { AuthGuard } from '@app/user/guards/auth.guard';\nimport { UserEnitity } from '@app/user/user.entity';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\n\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Get()\n  @UsePipes(new ValidationPipe({ transform: true }))\n  async findAll(\n    @User('id') currentUserId: number,\n    @Query() query: FindAllQueryDto,\n  ): Promise {\n    return await this.articleService.findAll(currentUserId, query);\n  }\n\n  @Get('feed')\n  @UseGuards(AuthGuard)\n  @UsePipes(new ValidationPipe({ transform: true }))\n  async getFeed(\n    @User('id') currentUserId: number,\n    @Query() query: FindAllQueryDto,\n  ): Promise {\n    return await this.articleService.getFeed(currentUserId, query);\n  }\n\n  @Post()\n  @UseGuards(AuthGuard)\n  @UsePipes(new BackendValidationPipe())\n  async create(\n    @User() currentUser: UserEnitity,\n    @Body('article') createArticleDto: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      currentUser,\n      createArticleDto,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Get(':slug')\n  async getSingleArticle(\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug')\n  @UseGuards(AuthGuard)\n  async deleteArticle(\n    @User('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteArticle(slug, currentUserId);\n  }\n\n  @Put(':slug')\n  @UseGuards(AuthGuard)\n  @UsePipes(new BackendValidationPipe())\n  async updateArticle(\n    @User('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body('article') updateArticleDto: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.updateArticle(\n      slug,\n      updateArticleDto,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(AuthGuard)\n  async addArticleToFavorites(\n    @User('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/unfavorite')\n  @UseGuards(AuthGuard)\n  async deleteArticleFromFavorites(\n    @User('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEnitity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/article.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { UserEnitity } from '@app/user/user.entity';\nimport {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: '' })\n  description: string;\n\n  @Column({ default: '' })\n  body: string;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @BeforeUpdate()\n  updateTimeStamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEnitity, (user) => user.articles, { eager: true })\n  author: UserEnitity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ArticleController } from '@app/article/article.controller';\nimport { ArticleEntity } from '@app/article/article.entity';\nimport { ArticleService } from '@app/article/article.service';\nimport { FollowEntity } from '@app/profile/Follow.entity';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ArticleEntity, UserEnitity, FollowEntity]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ArticleResponseInterface.html":{"url":"interfaces/ArticleResponseInterface.html","title":"interface - ArticleResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ArticleResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/types/ArticleResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            article\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        article\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        article:         ArticleEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ArticleEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArticleEntity } from '@app/article/article.entity';\n\nexport interface ArticleResponseInterface {\n  article: ArticleEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/article/article.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ArticleResponseInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(currentUser: UserEnitity, createArticleDto: CreateArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                UserEnitity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(currentUserId: number, query: FindAllQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                FindAllQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: FindAllQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                FindAllQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, updateArticleDto: CreateArticleDto, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/article/article.service.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArticleEntity } from '@app/article/article.entity';\nimport { CreateArticleDto } from '@app/article/dto/CreateArticle.dto';\nimport { ArticleResponseInterface } from '@app/article/types/ArticleResponse.interface';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository } from 'typeorm';\nimport slugify from 'slugify';\nimport { ArticlesResponseInterface } from '@app/article/types/ArticlesResponse.interface';\nimport { FindAllQueryDto } from '@app/article/dto/FindAllArticlesQuery.dto';\nimport { FollowEntity } from '@app/profile/Follow.entity';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEnitity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async findAll(\n    currentUserId: number,\n    query: FindAllQueryDto,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .orderBy('articles.createdAt', 'DESC')\n      .limit(query.limit)\n      .offset(query.offset);\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}%`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      queryBuilder.andWhere('articles.authorId = :id', { id: author.id });\n    }\n\n    if (query.favorited) {\n      const user = await this.userRepository.findOne({\n        where: { username: query.favorited },\n        relations: ['favorites'],\n      });\n      const ids = user.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.id IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1 = 0');\n      }\n    }\n\n    let favoriteIds: number[] = [];\n    if (currentUserId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: currentUserId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articlesCount = await queryBuilder.getCount();\n    const articles = await queryBuilder.getMany();\n\n    const articleWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articleWithFavorited, articlesCount };\n  }\n\n  async getFeed(\n    currentUserId: number,\n    query: FindAllQueryDto,\n  ): Promise {\n    const follows = await this.followRepository.find({\n      where: { followerId: currentUserId },\n    });\n\n    if (follows.length === 0) {\n      return { articles: [], articlesCount: 0 };\n    }\n\n    const followingUserIds = follows.map((follow) => follow.followingId);\n\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .where('articles.authorId IN (:...ids)', { ids: followingUserIds })\n      .orderBy('articles.createdAt', 'DESC')\n      .limit(query.limit)\n      .offset(query.offset);\n\n    const articlesCount = await queryBuilder.getCount();\n    const articles = await queryBuilder.getMany();\n\n    const currentUser = await this.userRepository.findOne({\n      where: { id: currentUserId },\n      relations: ['favorites'],\n    });\n    const favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n\n    const articleWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articleWithFavorited, articlesCount };\n  }\n\n  async createArticle(\n    currentUser: UserEnitity,\n    createArticleDto: CreateArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, createArticleDto);\n\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n\n    article.slug = this.getSlug(createArticleDto.title);\n\n    article.author = currentUser;\n\n    return await this.articleRepository.save(article);\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({\n      where: { slug },\n    });\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex >= 0) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async deleteArticle(\n    slug: string,\n    currentUserId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException(\"You're not the author\", HttpStatus.FORBIDDEN);\n    }\n\n    return await this.articleRepository.delete({ slug });\n  }\n\n  async updateArticle(\n    slug: string,\n    updateArticleDto: CreateArticleDto,\n    currentUserId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException(\"You're not the author\", HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, updateArticleDto);\n\n    return await this.articleRepository.save(article);\n  }\n\n  buildArticleResponse(article: ArticleEntity): ArticleResponseInterface {\n    return { article };\n  }\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ArticlesResponseInterface.html":{"url":"interfaces/ArticlesResponseInterface.html","title":"interface - ArticlesResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ArticlesResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/types/ArticlesResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            articles\n                                        \n                                \n                                \n                                        \n                                            articlesCount\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        articles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        articles:         ArticleType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ArticleType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        articlesCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        articlesCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArticleType } from '@app/article/types/Article.type';\n\nexport interface ArticlesResponseInterface {\n  articles: ArticleType[];\n  articlesCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/user/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/user/guards/auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { ExpressRequest } from '@app/types/ExpressRequest.interface';\nimport {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    if (request.user) {\n      return true;\n    }\n\n    throw new HttpException('Not authorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/middlewares/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/middlewares/auth.middleware.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: ExpressRequest, _: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/user/middlewares/auth.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ExpressRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExpressRequest } from '@app/types/ExpressRequest.interface';\nimport { UserJwtPayload } from '@app/user/types/UserJwtPayload.interface';\nimport { UserService } from '@app/user/user.service';\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private readonly userService: UserService) {}\n\n  async use(req: ExpressRequest, _: Response, next: NextFunction) {\n    if (!req.headers.authorization) {\n      req.user = null;\n      next();\n      return;\n    }\n\n    const token = req.headers.authorization.split(' ')[1];\n    try {\n      const decode = verify(token, process.env.JWT_SECRET) as UserJwtPayload;\n      const user = await this.userService.findById(decode.id);\n      req.user = user;\n      next();\n    } catch (err) {\n      req.user = null;\n      next();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BackendValidationPipe.html":{"url":"injectables/BackendValidationPipe.html","title":"injectable - BackendValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BackendValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/BackendValidation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatErrors\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatErrors\n                        \n                    \n                \n            \n            \n                \nformatErrors(errors: ValidationError[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/BackendValidation.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                            ValidationError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/BackendValidation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\n\n@Injectable()\nexport class BackendValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const object = plainToInstance(metadata.metatype, value);\n    const errors = await validate(object);\n\n    if (errors.length === 0) {\n      return value;\n    }\n\n    throw new HttpException(\n      { errors: this.formatErrors(errors) },\n      HttpStatus.UNPROCESSABLE_ENTITY,\n    );\n  }\n\n  formatErrors(errors: ValidationError[]) {\n    return errors.reduce((acc, error) => {\n      acc[error.property] = Object.values(error.constraints);\n      return acc;\n    }, {});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/dto/CreateArticle.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                body\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                    Optional\n                                tagList\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/dto/CreateArticle.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/dto/CreateArticle.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/article/dto/CreateArticle.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/dto/CreateArticle.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class CreateArticleDto {\n  @IsNotEmpty()\n  readonly title: string;\n\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  readonly body: string;\n\n  readonly tagList?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticles1658590819603.html":{"url":"classes/CreateArticles1658590819603.html","title":"class - CreateArticles1658590819603","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticles1658590819603\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658590819603-CreateArticles.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateArticles1658590819603'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658590819603-CreateArticles.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658590819603-CreateArticles.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658590819603-CreateArticles.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class CreateArticles1658590819603 implements MigrationInterface {\n    name = 'CreateArticles1658590819603'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"articles\" (\"id\" SERIAL NOT NULL, \"slug\" character varying NOT NULL, \"title\" character varying NOT NULL, \"description\" character varying NOT NULL DEFAULT '', \"body\" character varying NOT NULL DEFAULT '', \"tagList\" text NOT NULL, \"favoritesCount\" integer NOT NULL DEFAULT '0', \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(), \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT \"PK_0a6e2c450d83e0b6052c2793334\" PRIMARY KEY (\"id\"))`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP TABLE \"articles\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTags1658063174837.html":{"url":"classes/CreateTags1658063174837.html","title":"class - CreateTags1658063174837","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTags1658063174837\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658063174837-CreateTags.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateTags1658063174837'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658063174837-CreateTags.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658063174837-CreateTags.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658063174837-CreateTags.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateTags1658063174837 implements MigrationInterface {\n  name = 'CreateTags1658063174837';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \"tags\" (\"id\" SERIAL NOT NULL, \"name\" character varying NOT NULL, CONSTRAINT \"PK_e7dc17249a1148a1970748eda99\" PRIMARY KEY (\"id\"))`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE \"tags\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/CreateUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/CreateUser.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/CreateUser.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/CreateUser.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  readonly username: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUsers1658070509018.html":{"url":"classes/CreateUsers1658070509018.html","title":"class - CreateUsers1658070509018","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUsers1658070509018\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1658070509018-CreateUsers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateUsers1658070509018'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1658070509018-CreateUsers.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658070509018-CreateUsers.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1658070509018-CreateUsers.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUsers1658070509018 implements MigrationInterface {\n  name = 'CreateUsers1658070509018';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \"users\" (\"id\" SERIAL NOT NULL, \"email\" character varying NOT NULL, \"bio\" character varying NOT NULL DEFAULT '', \"image\" character varying NOT NULL DEFAULT '', \"password\" character varying NOT NULL, CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\"))`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE \"users\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequest.html":{"url":"interfaces/ExpressRequest.html","title":"interface - ExpressRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/ExpressRequest.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserEnitity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserEnitity\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserEnitity } from '@app/user/user.entity';\nimport { Request } from 'express';\n\nexport interface ExpressRequest extends Request {\n  user?: UserEnitity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllQueryDto.html":{"url":"classes/FindAllQueryDto.html","title":"class - FindAllQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/article/dto/FindAllArticlesQuery.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/article/dto/FindAllArticlesQuery.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/article/dto/FindAllArticlesQuery.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/dto/FindAllArticlesQuery.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/article/dto/FindAllArticlesQuery.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/article/dto/FindAllArticlesQuery.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from 'class-transformer';\n\nexport class FindAllQueryDto {\n  tag: string;\n\n  author: string;\n\n  favorited: string;\n\n  @Transform(({ value }) => Number.parseInt(value))\n  limit: number = 20;\n\n  @Transform(({ value }) => Number.parseInt(value))\n  offset: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/Follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followerId\n                            \n                            \n                                followingId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/Follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/Follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/Follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITagsResponse.html":{"url":"interfaces/ITagsResponse.html","title":"interface - ITagsResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITagsResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/types/tagsResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITagsResponse {\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitialSeed1658665867977.html":{"url":"classes/InitialSeed1658665867977.html","title":"class - InitialSeed1658665867977","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitialSeed1658665867977\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seeds/1658665867977-InitialSeed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/seeds/1658665867977-InitialSeed.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/seeds/1658665867977-InitialSeed.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TagEntity } from '@app/tag/tag.entity';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport dataSource from '@app/config/ormSeedDataSource.config';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { hash } from 'bcrypt';\nimport { ArticleEntity } from '@app/article/article.entity';\n\nexport class InitialSeed1658665867977 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await dataSource\n      .getRepository(TagEntity)\n      .createQueryBuilder()\n      .insert()\n      .into(TagEntity)\n      .values([{ name: 'dragons' }, { name: 'coffee' }, { name: 'nestjs' }])\n      .execute();\n\n    const user = await dataSource\n      .getRepository(UserEnitity)\n      .createQueryBuilder()\n      .insert()\n      .into(UserEnitity)\n      .values([\n        {\n          username: 'Jacob',\n          email: 'jake@jake.jake',\n          password: await hash('jakejake', 10),\n        },\n      ])\n      .execute();\n\n    console.log(user);\n\n    await dataSource\n      .getRepository(ArticleEntity)\n      .createQueryBuilder()\n      .insert()\n      .into(ArticleEntity)\n      .values([\n        {\n          slug: 'first-article',\n          title: 'First article',\n          description: 'first article desc',\n          body: 'first article body',\n          tagList: ['coffee', 'dragons'],\n          author: { id: user.identifiers[0].id },\n        },\n        {\n          slug: 'second-article',\n          title: 'Second article',\n          description: 'second article desc',\n          body: 'second article body',\n          tagList: ['coffee', 'dragons'],\n          author: { id: user.identifiers[0].id },\n        },\n      ])\n      .execute();\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/LoginUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/LoginUser.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/LoginUser.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ProfileService } from '@app/profile/profile.service';\nimport { ProfileResponseInterface } from '@app/profile/types/ProfileResponse.interface';\nimport { User } from '@app/user/decorators/user.decorator';\nimport { AuthGuard } from '@app/user/guards/auth.guard';\nimport {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\n\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  async getProfile(\n    @User('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ): Promise {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(AuthGuard)\n  async followProfile(\n    @User('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ): Promise {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(AuthGuard)\n  async unfollowProfile(\n    @User('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ): Promise {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService\n\nProfileService\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { FollowEntity } from '@app/profile/Follow.entity';\nimport { ProfileController } from '@app/profile/profile.controller';\nimport { ProfileService } from '@app/profile/profile.service';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEnitity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileResponseInterface.html":{"url":"interfaces/ProfileResponseInterface.html","title":"interface - ProfileResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/types/ProfileResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            profile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        profile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profile:         Omit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ProfileType } from '@app/profile/types/Profile.type';\n\nexport interface ProfileResponseInterface {\n  profile: Omit;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile: ProfileType)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n                                    \n                                                ProfileType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ProfileResponseInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FollowEntity } from '@app/profile/Follow.entity';\nimport { ProfileType } from '@app/profile/types/Profile.type';\nimport { ProfileResponseInterface } from '@app/profile/types/ProfileResponse.interface';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEnitity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(\n    currentUserId: number,\n    profileUsername: string,\n  ): Promise {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(\n    currentUserId: number,\n    profileUsername: string,\n  ): Promise {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        'Follower and Following cant be equal',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(\n    currentUserId: number,\n    profileUsername: string,\n  ): Promise {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        'Follower and Following cant be equal',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: ProfileType): ProfileResponseInterface {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tag/tag.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { TagService } from '@app/tag/tag.service';\nimport { ITagsResponse } from '@app/tag/types/tagsResponse.interface';\n\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Get()\n  async findAll(): Promise {\n    const tags = await this.tagService.findAll();\n\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagController } from '@app/tag/tag.controller';\nimport { TagService } from '@app/tag/tag.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagEntity } from '@app/tag/tag.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController], // dependency injection\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tag/tag.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tag/tag.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TagEntity } from '@app/tag/tag.entity';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return await this.tagRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/UpdateUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/UpdateUser.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/UpdateUser.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/UpdateUser.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/UpdateUser.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class UpdateUserDto {\n  readonly username: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  readonly bio: string;\n\n  readonly image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                currentUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users')@UsePipes(new BackendValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        currentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    currentUser(user: UserEnitity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEnitity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/login')@UsePipes(new BackendValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(currentUserId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('user')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BackendValidationPipe } from '@app/common/pipes/BackendValidation.pipe';\nimport { ExpressRequest } from '@app/types/ExpressRequest.interface';\nimport { User } from '@app/user/decorators/user.decorator';\nimport { CreateUserDto } from '@app/user/dto/CreateUser.dto';\nimport { LoginUserDto } from '@app/user/dto/LoginUser.dto';\nimport { UpdateUserDto } from '@app/user/dto/UpdateUser.dto';\nimport { AuthGuard } from '@app/user/guards/auth.guard';\nimport { UserResponseInterface } from '@app/user/types/UserResponse.interface';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { UserService } from '@app/user/user.service';\nimport {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Put,\n  Req,\n  UseGuards,\n  UsePipes,\n} from '@nestjs/common';\nimport { Request } from 'express';\n\n@Controller()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('users')\n  @UsePipes(new BackendValidationPipe())\n  async createUser(\n    @Body('user') createUserDto: CreateUserDto,\n  ): Promise {\n    const user = await this.userService.createUser(createUserDto);\n    return this.userService.buildUserResponse(user);\n  }\n\n  @Post('users/login')\n  @UsePipes(new BackendValidationPipe())\n  async login(\n    @Body('user') loginUserDto: LoginUserDto,\n  ): Promise {\n    const user = await this.userService.login(loginUserDto);\n    return this.userService.buildUserResponse(user);\n  }\n\n  @Get('user')\n  @UseGuards(AuthGuard)\n  async currentUser(@User() user: UserEnitity): Promise {\n    return this.userService.buildUserResponse(user);\n  }\n\n  @Put('user')\n  @UseGuards(AuthGuard)\n  async updateUser(\n    @User('id') currentUserId: number,\n    @Body('user') updateUserDto: UpdateUserDto,\n  ): Promise {\n    const updatedUser = await this.userService.updateUser(\n      currentUserId,\n      updateUserDto,\n    );\n    return this.userService.buildUserResponse(updatedUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEnitity.html":{"url":"entities/UserEnitity.html","title":"entity - UserEnitity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEnitity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { hash } from 'bcrypt';\nimport { ArticleEntity } from '@app/article/article.entity';\n\n@Entity({ name: 'users' })\nexport class UserEnitity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column({ default: '' })\n  bio: string;\n\n  @Column({ default: '' })\n  image: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await hash(this.password, 10);\n  }\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserJwtPayload.html":{"url":"interfaces/UserJwtPayload.html","title":"interface - UserJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/types/UserJwtPayload.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    JwtPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtPayload } from 'jsonwebtoken';\n\nexport interface UserJwtPayload extends JwtPayload {\n  id: number;\n\n  username: string;\n\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from '@app/user/user.controller';\nimport { UserService } from '@app/user/user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { AuthGuard } from '@app/user/guards/auth.guard';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEnitity])],\n  controllers: [UserController],\n  providers: [UserService, AuthGuard],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResponseInterface.html":{"url":"interfaces/UserResponseInterface.html","title":"interface - UserResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/types/UserResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '@app/user/types/User.type';\n\nexport interface UserResponseInterface {\n  user: UserType & { token: string };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildUserResponse\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                generateJwt\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildUserResponse\n                        \n                    \n                \n            \n            \n                \nbuildUserResponse(user: UserEnitity)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEnitity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserResponseInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateJwt\n                        \n                    \n                \n            \n            \n                \ngenerateJwt(user: UserEnitity)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEnitity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from '@app/user/dto/CreateUser.dto';\nimport { UserEnitity } from '@app/user/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { sign } from 'jsonwebtoken';\nimport { UserResponseInterface } from '@app/user/types/UserResponse.interface';\nimport { LoginUserDto } from '@app/user/dto/LoginUser.dto';\nimport { compare } from 'bcrypt';\nimport { UpdateUserDto } from '@app/user/dto/UpdateUser.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEnitity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const userByEmail = await this.userRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    const userByUsername = await this.userRepository.findOne({\n      where: { username: createUserDto.username },\n    });\n\n    const errorResponse = { errors: {} };\n\n    if (userByEmail) {\n      errorResponse.errors['email'] = 'has already been taken';\n    }\n\n    if (userByUsername) {\n      errorResponse.errors['username'] = 'has already been taken';\n    }\n\n    if (userByEmail || userByUsername) {\n      throw new HttpException(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    const newUser = new UserEnitity();\n    Object.assign(newUser, createUserDto);\n    return await this.userRepository.save(newUser);\n  }\n\n  async login(loginUserDto: LoginUserDto): Promise {\n    const user = await this.userRepository.findOne({\n      where: { email: loginUserDto.email },\n      select: ['id', 'username', 'bio', 'email', 'image', 'password'],\n    });\n\n    const errorResponse = { errors: { 'email or password': 'is invalid' } };\n\n    if (!user) {\n      throw new HttpException(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    const isPasswordCorrect = await compare(\n      loginUserDto.password,\n      user.password,\n    );\n\n    if (!isPasswordCorrect) {\n      throw new HttpException(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    delete user.password;\n    return user;\n  }\n\n  async findById(id: number): Promise {\n    return this.userRepository.findOne({ where: { id } });\n  }\n\n  async updateUser(\n    userId: number,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    const user = await this.findById(userId);\n    Object.assign(user, updateUserDto);\n    return await this.userRepository.save(user);\n  }\n\n  generateJwt(user: UserEnitity): string {\n    return sign(\n      { id: user.id, username: user.username, email: user.email },\n      process.env.JWT_SECRET,\n    );\n  }\n\n  buildUserResponse(user: UserEnitity): UserResponseInterface {\n    delete user.password;\n\n    return {\n      user: { ...user, token: this.generateJwt(user) },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/article/dto/CreateArticle.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/article/dto/FindAllArticlesQuery.dto.ts\n            \n            class\n            FindAllQueryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/article/types/ArticleResponse.interface.ts\n            \n            interface\n            ArticleResponseInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/article/types/ArticlesResponse.interface.ts\n            \n            interface\n            ArticlesResponseInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pipes/BackendValidation.pipe.ts\n            \n            injectable\n            BackendValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/orm.config.ts\n            \n            variable\n            ormconfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1658063174837-CreateTags.ts\n            \n            class\n            CreateTags1658063174837\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658070509018-CreateUsers.ts\n            \n            class\n            CreateUsers1658070509018\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658152414900-AddUsernameToUsers.ts\n            \n            class\n            AddUsernameToUsers1658152414900\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658590819603-CreateArticles.ts\n            \n            class\n            CreateArticles1658590819603\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658591658979-AddRelationsBetweenArticleAndUser.ts\n            \n            class\n            AddRelationsBetweenArticleAndUser1658591658979\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658659352075-AddFavoritesRelationsBetweenArticleAndUser.ts\n            \n            class\n            AddFavoritesRelationsBetweenArticleAndUser1658659352075\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1658668825878-AddFollowsRelationTable.ts\n            \n            class\n            AddFollowsRelationTable1658668825878\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/profile/Follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/profile/types/ProfileResponse.interface.ts\n            \n            interface\n            ProfileResponseInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seeds/1658665867977-InitialSeed.ts\n            \n            class\n            InitialSeed1658665867977\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tag/types/tagsResponse.interface.ts\n            \n            interface\n            ITagsResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/ExpressRequest.interface.ts\n            \n            interface\n            ExpressRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/CreateUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/LoginUser.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/UpdateUser.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/middlewares/auth.middleware.ts\n            \n            injectable\n            AuthMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/types/UserJwtPayload.interface.ts\n            \n            interface\n            UserJwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/types/UserResponse.interface.ts\n            \n            interface\n            UserResponseInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            UserEnitity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            module-alias : ^2.2.2\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            slugify : ^1.6.5\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArticleType   (src/.../Article.type.ts)\n                        \n                        \n                            ProfileType   (src/.../Profile.type.ts)\n                        \n                        \n                            UserType   (src/.../User.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/article/types/Article.type.ts\n    \n    \n        \n            \n                \n                    \n                    ArticleType\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    src/profile/types/Profile.type.ts\n    \n    \n        \n            \n                \n                    \n                    ProfileType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/user/types/User.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserType\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ormconfig   (src/.../orm.config.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/orm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ormconfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'realworlddbuser',\n  password: '123456',\n  database: 'realworld',\n  entities: [path.join(__dirname, '..', '/**/*.entity{.ts,.js}')],\n  synchronize: false, // sync database and create tables\n  migrations: [path.join(__dirname, '..', '/migrations/**/*{.ts,.js}')],\n}\n                    \n                \n\n\n        \n    \n\n    src/user/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: any, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n\n  if (!request.user) {\n    return null;\n  }\n\n  if (data) {\n    return request.user[data];\n  }\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
